<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小梦岛 - ROYIANS个人博客</title>
  
  <subtitle>For my vidorra</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.royians.cn/"/>
  <updated>2020-02-11T07:58:35.960Z</updated>
  <id>https://www.royians.cn/</id>
  
  <author>
    <name>Morty.ROY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java核心知识点整理</title>
    <link href="https://www.royians.cn/2020/02.11.61289dff/"/>
    <id>https://www.royians.cn/2020/02.11.61289dff/</id>
    <published>2020-02-11T06:35:52.182Z</published>
    <updated>2020-02-11T07:58:35.960Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>(1) 基本概念：</p><p>JVM是可运行Java代码的假想计算机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。</p><p>我们都知道Java源文件，通过编译器，能够生产相应的class文件，也就是字节码文件，二字节码文件又通过Java虚拟机中的解释器，编译成特定机器上的机器码。</p><p>也就是如下：</p><ol><li>Java源文件 -&gt; 编译器 -&gt; 字节码文件</li><li>字节码文件 -&gt; JVM -&gt; 机器码。</li></ol><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是Java为什么能够跨平台的原因了。当一个程序从开始运行，这是虚拟机已经开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或关闭，则虚拟机实例消亡。多个虚拟机实例之间数据就不能共享。</p><p>2.1 线程</p><p>这里所说的线程是指程序执行过程中的一个线程实体。JVM允许一个应用并发的执行多个线程。Hotspot JVM 中的Java线程与原生操作系统线程有直接的映射关系。<strong>当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统的原生线程。Java线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的CPU上。当原生线程初始化完毕，iu会调用Java线程的run()方法。当线程结束时，会释放原生线程和Java线程的所有资源。</strong></p><p>JVM内存区域只要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区【Java堆、方法区】、直接内存。</p><p><strong>线程私有数据区域生命周期与线程是相同的，以来用户线程的而启动/结束 而 创建/销毁</strong>，每个线程都有与操作系统的本地线程直接映射，因此这部分内存区域的存在与否随本地线程的生死对应。</p><p><strong>线程共享区域随虚拟机的启动/关闭而创建/销毁**</strong>直接内存并不是JVM运行时数据区的一部分<strong>但也会被频繁地使用，在JDK1.4引入的</strong>NIO提供了基于Channel与Buffer的IO方式，它可以使用Native函数库直接分配对外内存，然后使用DirectByteBuffer对象作为这块内存的引用进行操作，这样就避免了在Java堆和Native堆中来回复制数据，因此在一些场景中可以显著提高性能。**</p><p>2.2.1. 程序计数器-线程私有</p><p>一块较小的内存空间</p><h2 id="5-Java基础"><a href="#5-Java基础" class="headerlink" title="5. Java基础"></a>5. Java基础</h2><p>5.1.1. Java异常分类及处理</p><p>5.1.1.1. 概念</p><p>如果某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。在这种情况下会抛出一个封装了错误信息的对象。此时，这个方法会立刻推出同时不返回任何值。另外调用这个方法的其他代码也无法继续执行。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h2&gt;&lt;p&gt;(
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记一次笔试经历</title>
    <link href="https://www.royians.cn/2020/02.08.9a314c8b/"/>
    <id>https://www.royians.cn/2020/02.08.9a314c8b/</id>
    <published>2020-02-08T12:27:49.000Z</published>
    <updated>2020-02-09T10:50:35.799Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><div class="input-with-label"><input id="hbePass" type="password" class="input-with-label__input" autofocus="autofocus"><label for="hbePass" class="input-with-label__label">私人笔记，请换篇文章阅读吧<div class="input-with-label__label__corner"></div></label></div></div><script id="hbeData" type="hbeData" data-hmacdigest="ffc7468de619ec463d09338f40b1c3ecb55522c49abe66a4ed3b97adf8737f76"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      刚刚参加了某公司的笔试，今天总结一下吧。
    
    </summary>
    
    
      <category term="经验" scheme="https://www.royians.cn/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="笔试" scheme="https://www.royians.cn/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一天复习MyBatis</title>
    <link href="https://www.royians.cn/2020/02.06.8317fb0a/"/>
    <id>https://www.royians.cn/2020/02.06.8317fb0a/</id>
    <published>2020-02-06T02:56:51.000Z</published>
    <updated>2020-02-10T08:09:52.239Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>哪里可能一天！好好复习啊!</p></blockquote><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><h3 id="1-1-传统的JDBC编程"><a href="#1-1-传统的JDBC编程" class="headerlink" title="1.1 传统的JDBC编程"></a>1.1 传统的JDBC编程</h3><p>Java程序都是通过JDBC(Java Database Connectivity)连接数据库的。JDBC是一种规范，用来适配各种类型的数据库。不过JDBC只定义了接口规范，具体的实现是交给数据库厂商去实现的，JDBC是一种典型的桥接模式。</p><p>下面是一个传统的使用JDBC进行数据库连接并查询数据的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.vidorra.todo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.vidorra.todo.pojo.TodoListEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ROYIANS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/7 20:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">            String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/vidorra?serverTimezone=PRC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"</span>;</span><br><span class="line">            String user = <span class="string">"root"</span>;</span><br><span class="line">            String password = <span class="string">"123456"</span>;</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            Logger.getLogger(JDBCExample<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">e</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TodoListEntity <span class="title">getTodo</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Connection connection = getConnection();</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from todo_list where id = ?"</span>;</span><br><span class="line">            ps = Objects.requireNonNull(connection).prepareStatement(sql);</span><br><span class="line">            ps.setLong(<span class="number">1</span>, id);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">long</span> todoID = rs.getLong(<span class="string">"id"</span>);</span><br><span class="line">                <span class="keyword">long</span> todoUID = rs.getLong(<span class="string">"uid"</span>);</span><br><span class="line">                String todoContents = rs.getString(<span class="string">"contents"</span>);</span><br><span class="line">                <span class="keyword">byte</span> todoStatus = rs.getByte(<span class="string">"status"</span>);</span><br><span class="line">                <span class="keyword">int</span> todoCreateTime = rs.getInt(<span class="string">"create_time"</span>);</span><br><span class="line">                <span class="keyword">int</span> todoUpdateTime = rs.getInt(<span class="string">"update_time"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TodoListEntity(</span><br><span class="line">                        todoID,</span><br><span class="line">                        todoUID,</span><br><span class="line">                        todoContents,</span><br><span class="line">                        todoStatus,</span><br><span class="line">                        todoCreateTime,</span><br><span class="line">                        todoUpdateTime</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            Logger.getLogger(JDBCExample<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">e</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.close(rs, ps, connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement stmt, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span> &amp;&amp; !rs.isClosed()) &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            Logger.getLogger(JDBCExample<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">e</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span> &amp;&amp; !stmt.isClosed()) &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            Logger.getLogger(JDBCExample<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">e</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span> &amp;&amp; !connection.isClosed()) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            Logger.getLogger(JDBCExample<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">e</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JDBCExample example = <span class="keyword">new</span> JDBCExample();</span><br><span class="line">        TodoListEntity entity = example.getTodo(<span class="number">1L</span>);</span><br><span class="line">        System.err.println(<span class="string">"todo =&gt; "</span> + entity.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis入门"><a href="#MyBatis入门" class="headerlink" title="MyBatis入门"></a>MyBatis入门</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h2 id="MyBatis的解析和运行原理"><a href="#MyBatis的解析和运行原理" class="headerlink" title="MyBatis的解析和运行原理"></a>MyBatis的解析和运行原理</h2><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h2 id="MyBatis-Spring"><a href="#MyBatis-Spring" class="headerlink" title="MyBatis-Spring"></a>MyBatis-Spring</h2><h2 id="实用的场景"><a href="#实用的场景" class="headerlink" title="实用的场景"></a>实用的场景</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;哪里可能一天！好好复习啊!&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;MyBatis简介&quot;&gt;&lt;a href=&quot;#M
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.royians.cn/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="https://www.royians.cn/tags/MyBatis/"/>
    
      <category term="复习" scheme="https://www.royians.cn/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains系列激活方法</title>
    <link href="https://www.royians.cn/2020/01.04.3d7d7b43/"/>
    <id>https://www.royians.cn/2020/01.04.3d7d7b43/</id>
    <published>2020-01-04T01:12:03.000Z</published>
    <updated>2020-01-27T09:08:56.314Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><p><strong>下面是国际惯例：</strong></p><div class="note danger"><p>本项目只做个人学习研究之用，不得用于商业用途！<br>若资金允许，请点击<a href="https://www.jetbrains.com/idea/buy/" target="_blank" rel="noopener">链接</a>购买正版，谢谢合作！<br>学生凭学生证可<a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369-%E5%AD%A6%E7%94%9F%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">免费申请</a>正版授权！<br>创业公司可5折<a href="https://www.jetbrains.com/shop/eform/startup" target="_blank" rel="noopener">购买</a>正版授权！</p></div><p>下面叫你使用补丁激活IDE。</p><p>传送门：</p><p><a href="https://zhile.io/2018/08/25/jetbrains-license-server-crack.html" target="_blank" rel="noopener">zhile.io</a></p><p><a href="https://pan.baidu.com/s/17fe6C1a3BL-qV69w6ZHPOg" target="_blank" rel="noopener">百度云</a>-&gt;<code>i45y</code></p><p><strong>sha1sum: cfef1d8d394bee3202a6ab632e66884c860983a3</strong></p><hr><p><strong>使用教程：</strong></p><p><strong>如果你下载的jetbrains-agent.jar小于1M，肯定是没有下载完全（可对照sha1sum.txt）。</strong></p><p><strong>请先一定仔细阅读本文档！一定通过IDE菜单编辑javaagent参数，别瞎TM在bin目录下改！！！</strong></p><p><strong>可以参考文件夹内：javaagent_sample.png</strong></p><p>使用方法:</p><ul><li><p>先下载压缩包解压后得到jetbrains-agent.jar，把它放到你认为合适的文件夹内。(无空格，仅英文，不在C盘)</p></li><li><p>启动你的IDE，如果上来就需要注册，选择：试用（Evaluate for free）进入IDE。如果你先前用过别的激活码，请先删除该激活码：Help-&gt;register-&gt;Remove Lisence-&gt;重启IDE</p></li><li><p>点击你要注册的IDE菜单：”Configure” 或 “Help” -&gt; “Edit Custom VM Options …”<br>如果提示是否要创建文件，请点”Yes”。<a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544869" target="_blank" rel="noopener">参考文章</a></p></li><li><p>在打开的vmoptions编辑窗口末行添加：<code>-javaagent:/绝对路径/到/你的/jetbrains-agent.jar</code><br>一定要自己确认好路径(不要使用中文路径)，填错会导致IDE打不开！！！最好使用绝对路径。<br>一个vmoptions内只能有一个-javaagent参数。<br>示例:</p><pre><code>mac:      -javaagent:/Users/neo/jetbrains-agent.jarlinux:    -javaagent:/home/neo/jetbrains-agent.jarwindows:  -javaagent:E:\Users\neo\jetbrains-agent.jar</code></pre><p>如果还是填错了，参考<a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544519" target="_blank" rel="noopener">这篇文章</a>编辑vmoptions补救。</p></li><li><p>重启你的IDE。</p></li><li><p>点击IDE菜单 “Help” -&gt; “Register…” 或 “Configure” -&gt; “Manage License…”</p><p>选择Activation code方式离线激活，请使用：ACTIVATION_CODE.txt 内的注册码激活<br>如果激活窗口一直弹出（error 1653219），请去hosts文件里移除jetbrains相关的项目</p></li></ul><p>IDE升级会从旧版本导入以上设置，导入配置后可能提示未注册（因为刚导入的vmoptions未生效），直接重启IDE即可，无需其他操作。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;下面是国际惯例：&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;本项目只做个人学习研究之用，不
      
    
    </summary>
    
    
      <category term="技巧" scheme="https://www.royians.cn/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="IDEA" scheme="https://www.royians.cn/tags/IDEA/"/>
    
      <category term="JetBrains" scheme="https://www.royians.cn/tags/JetBrains/"/>
    
  </entry>
  
  <entry>
    <title>一键穿越到2020-12-31</title>
    <link href="https://www.royians.cn/2020/01.02.5cb164bd/"/>
    <id>https://www.royians.cn/2020/01.02.5cb164bd/</id>
    <published>2020-01-02T06:12:20.000Z</published>
    <updated>2020-01-02T07:54:55.618Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><p>什么？一键穿越到2020-12-31？什么啊。今天明明才1月2号。刚刚享受过元旦的快乐，你就告诉我又到年底了？</p><p>nonono，实际上是今天我在V站看到了<a href="https://v2ex.com/t/633650" target="_blank" rel="noopener">这篇帖子</a>。觉得很有意思。所以拿来分享一下。</p><p>写代码的时候，你常用的时间格式是<code>YYYY-MM-dd</code>，还是<code>yyyy-MM-dd</code>呢？</p><p>可能这些的区别，你曾经在上课的时候听老师提起过。也可能你从来没有注意过他们的区别。但是无论如何，今年已经2020了。你可一定要搞清楚这些的区别！</p><p>我们先来复现一下贴中的BUG：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestYearBug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime before2020 = LocalDateTime.of(<span class="number">2019</span>, Month.DECEMBER, <span class="number">25</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> day = <span class="number">0</span>; day &lt; <span class="number">8</span>; day++) &#123;</span><br><span class="line">        String dateFormatToString = before2020.format(DateTimeFormatter.ofPattern(<span class="string">"YYYY-MM-dd"</span>));</span><br><span class="line">        System.out.println(dateFormatToString);</span><br><span class="line">        before2020 = before2020.plusDays(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不认得LocalDateTime和DateTimeFormatter的话，那你真的是Out啦，不要再用Date和SimpleDateFormatter啦。快去了解一下这两个崭新的类吧。</p><p>话归正题，让我们来看看结果是什么：</p><p><img alt="😮" data-src="https://i.loli.net/2020/01/02/bO9fP4hQqUpYag8.png"></p><p>什么鬼啊，为什么2019-12-28下面直接就是2020-12-29了？</p><p>其实这个问题在 Stack OverFlow 上很早就有讨论了。<a href="https://stackoverflow.com/questions/8686331/y-returns-2012-while-y-returns-2011-in-simpledateformat" target="_blank" rel="noopener">Y returns 2012 while y returns 2011 in SimpleDateFormat</a>.</p><p>我们去<a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns" target="_blank" rel="noopener">Java Doc</a>上翻一翻，很容易就找到答案了：<code>Y</code>是“Week-Based-Year”，而<code>y</code>是“Year”。</p><p>那什么是 “Week-Based-Year”呢，我找到的<a href="http://www.epochconverter.com/epoch/weeknumbers.php" target="_blank" rel="noopener">一篇文章</a>中这样解释：</p><blockquote><p>Week number according to the ISO-8601 standard, weeks starting on Monday. The first week of the year is the week that contains that year’s first Thursday (=’First 4-day week’). The highest week number in a year is either 52 or 53.</p></blockquote><p>根据 ISO-8601 标准，一周始于周一，一年的第一周是包含这一年第一个星期四的那一周。因此，2020-01-02，也就是今天，是周四。因此，这周就是2020年第一周。所以作为“Week Year”，<code>YYYY</code>就会把同在本周的2019-….</p><p>写到这里我迷惑了。看看上面的运行结果。如果说因为这周是2020第一周，所以把周一周二的12-30、12-31归于2020年，我理解。但是12-29呢？它是属于上周日啊？</p><p>于是我就去找了其他地方的文章，最后在掘金看到有人说：<code>YYYY</code>是<code>week-based-year</code>，表示：当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，那么这周就算入下一年。所以2019年12月29日那天在这种表述方式下就已经 2020 年了。</p><p>这样说的话就解释了运行结果了。但是我又运行了一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestYearBug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime before2020 = LocalDateTime.of(<span class="number">2019</span>, Month.DECEMBER, <span class="number">25</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> day = <span class="number">0</span>; day &lt; <span class="number">8</span>; day++) &#123;</span><br><span class="line">        String dateFormatToString = before2020.format(DateTimeFormatter.ofPattern(<span class="string">"YYYY-MM-dd w e E"</span>));</span><br><span class="line">        System.out.print(<span class="string">"dayOfWeek:"</span>+before2020.get(WeekFields.ISO.dayOfWeek())+<span class="string">" "</span>);</span><br><span class="line">        System.out.println(dateFormatToString);</span><br><span class="line">        before2020 = before2020.plusDays(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt="🤨" data-src="https://i.loli.net/2020/01/02/bpD5NYwzUgdovlm.png"></p><p>难道这不是按照ISO-8601来的吗？所以上面我阅读ISO标准的时候才会被迷惑？</p><p>这就留待日后我去找寻答案了。</p><p>附表：All letters ‘A’ to ‘Z’ and ‘a’ to ‘z’ are reserved as pattern letters. The following pattern letters are defined:</p><pre>  Symbol  Meaning                     Presentation      Examples  ------  -------                     ------------      -------   G       era                         text              AD; Anno Domini; A   u       year                        year              2004; 04   y       year-of-era                 year              2004; 04   D       day-of-year                 number            189   M/L     month-of-year               number/text       7; 07; Jul; July; J   d       day-of-month                number            10   Q/q     quarter-of-year             number/text       3; 03; Q3; 3rd quarter   Y       week-based-year             year              1996; 96   w       week-of-week-based-year     number            27   W       week-of-month               number            4   E       day-of-week                 text              Tue; Tuesday; T   e/c     localized day-of-week       number/text       2; 02; Tue; Tuesday; T   F       week-of-month               number            3   a       am-pm-of-day                text              PM   h       clock-hour-of-am-pm (1-12)  number            12   K       hour-of-am-pm (0-11)        number            0   k       clock-hour-of-am-pm (1-24)  number            0   H       hour-of-day (0-23)          number            0   m       minute-of-hour              number            30   s       second-of-minute            number            55   S       fraction-of-second          fraction          978   A       milli-of-day                number            1234   n       nano-of-second              number            987654321   N       nano-of-day                 number            1234000000   V       time-zone ID                zone-id           America/Los_Angeles; Z; -08:30   z       time-zone name              zone-name         Pacific Standard Time; PST   O       localized zone-offset       offset-O          GMT+8; GMT+08:00; UTC-08:00;   X       zone-offset 'Z' for zero    offset-X          Z; -08; -0830; -08:30; -083015; -08:30:15;   x       zone-offset                 offset-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;   Z       zone-offset                 offset-Z          +0000; -0800; -08:00;   p       pad next                    pad modifier      1   '       escape for text             delimiter   ''      single quote                literal           '   [       optional section start   ]       optional section end   #       reserved for future use   {       reserved for future use   }       reserved for future use </pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;什么？一键穿越到2020-12-31？什么啊。今天明明才1月2号。刚刚享受过元旦的快乐，你就告诉我又到年底了？&lt;/p&gt;&lt;p&gt;nonono，实际上
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.royians.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
      <category term="知识碎片" scheme="https://www.royians.cn/tags/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>春招资讯（2019-2020）</title>
    <link href="https://www.royians.cn/2019/12.25.zhaopin/"/>
    <id>https://www.royians.cn/2019/12.25.zhaopin/</id>
    <published>2019-12-25T09:19:59.000Z</published>
    <updated>2020-02-10T07:25:08.766Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><div class="note danger"><p>以下内容来自各高校就业信息网、牛客网等，未经验证，请自行甄别，谨防受骗，部分企业可能在多个高校发布招聘信息，所以会有重复内容的现象。</p></div><div class="note info"><p>点击加入「<a href="https://jq.qq.com/?_wv=1027&k=5NkIM6F" target="_blank" rel="noopener">2020春招信息</a>」群，获取最新Java面试笔试相关资料。</p></div><h2 id="2020-02-10"><a href="#2020-02-10" class="headerlink" title="2020.02.10"></a>2020.02.10</h2><p>【今天更新的春招公司】</p><ul><li>华为 2020校招<ul><li>工作地点：全国</li><li>投递时间：3月上旬截止（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/239?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>北京思特奇信息技术有限公司<ul><li>招聘人数：20</li><li>招聘职位：Java方向（实习+转正）</li><li>工作地点：太原为主，其他地区结合学生意愿和公司需求综合确定；</li><li>月薪范围：6000～7999</li><li>详情：<a href="http://jiuye.tyut.edu.cn/zpweb/job/Job_JobDetail.aspx?rel_ID=29544" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>更多请进群</li></ul><p>【今天新增补录公司】</p><ul><li>华为公司2012实验室—产品数据应用部<ul><li>补招岗位：产品数据工程师</li><li>工作地点：深圳，成都、西安</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/365492?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>数美科技<ul><li>补招岗位：架构研发工程师、数据分析师、数据挖掘工程师、算法工程师</li><li>大数据平台研发工程师</li><li>工作地点：北京、杭州</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/365506?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-02-07"><a href="#2020-02-07" class="headerlink" title="2020.02.07"></a>2020.02.07</h2><div class="note success"><p><a href="http://www2017.tyut.edu.cn/info/1843/16332.htm" target="_blank" rel="noopener">[2020-02-06]太原理工大学线上招聘信息速递（第一期)</a></p></div><p>【今天更新的春招公司】</p><ul><li>浪潮 2020校招<ul><li>工作地点：北京、济南、天津、青岛</li><li>投递时间：1月17日起（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/925?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>亚信 2020校招<ul><li>工作地点：北京、西安、郑州、成都、济南、上海、广州、重庆、南京、杭州、海口、福州、南宁、合肥、武汉、长沙、沈阳、长春、昆明、贵阳、呼和浩特、西宁</li><li>投递时间：1月17日起（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/706?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>太原市华纳方盛科技有限公司<ul><li>招聘人数：4</li><li>月薪范围：6000～7999</li><li>职位类别：软件工程师</li><li>查看详情：<a href="http://jiuye.tyut.edu.cn/zpweb/job/Job_JobDetail.aspx?rel_ID=10584" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>福建博思软件股份有限公司<ul><li>月薪范围：10000～14999</li><li>招聘职位：Java研发工程师</li><li>查看详情：<a href="http://jiuye.tyut.edu.cn/zpweb/job/Job_JobDetail.aspx?rel_ID=29526" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>阿里巴巴供应链<ul><li>补招岗位：算法</li><li>工作地点：北京、杭州</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/364916?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-02-06"><a href="#2020-02-06" class="headerlink" title="2020.02.06"></a>2020.02.06</h2><p>【今天更新的春招公司】</p><ul><li>中兴 2020校招<ul><li>工作地点：全国</li><li>投递时间：1月20日起（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/664?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>作业帮 2020校招<ul><li>工作地点：北京、西安、石家庄、郑州、成都、济南</li><li>投递时间：2月3日起（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/893?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>TCL 2020校招<ul><li>工作地点：北京、西安、成都、广州、哈尔滨、武汉、长沙、重庆、合肥、南昌、深圳</li><li>投递时间：1月20日起（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/785?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>青岛海尔生物医疗股份有限公司<ul><li>所在地区：青岛市</li><li>招聘职位：软件开发工程师</li><li>月薪范围：10000～14999</li><li>招聘人数：20</li><li>其他待遇：10个月住宿，五险一金商业保险，餐补餐厅，班车等</li><li>详情链接：<a href="http://jiuye.tyut.edu.cn/zpweb/job/Job_JobDetail.aspx?rel_ID=29426" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>北京度量科技有限公司<ul><li>所在地区：北京市</li><li>月薪范围：8000～9999</li><li>职位类别：硬件测试</li><li>详情链接：<a href="http://jiuye.tyut.edu.cn/zpweb/job/Job_CompanyDetail.aspx?com_ID=19989" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>中通快递2020春招<ul><li>网申链接：<a href="https://www.hotjob.cn/wt/ZTO/mobweb/v8/position/detail?safe=Y&canBack=true&recruitType=1&postIdsAry=100616&postCanApply=0&entityPage.currentPage=1&openid=&brandCode=1" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-02-05"><a href="#2020-02-05" class="headerlink" title="2020.02.05"></a>2020.02.05</h2><p>【今天更新的春招公司】</p><ul><li>京东 2020校招（物流卓越之星）<ul><li>工作地点：全国</li><li>投递时间：2019.8-2020.3（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/151?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>吉利 2020校招<ul><li>工作地点：全国</li><li>投递时间：1月14日-2月9日（网申）</li><li>网申链接：<a href="https://www.nowcoder.com/school/schedule/1164?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>猿辅导<ul><li>补招岗位：数据分析工程师、深度学习算法工程师、前端开发工程师、客户端开发工程师</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/364452?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-02-04"><a href="#2020-02-04" class="headerlink" title="2020.02.04"></a>2020.02.04</h2><p>【今天新增补录公司】</p><ul><li>字节跳动<ul><li>补招岗位：前端工程师</li><li>工作地点：北京/深圳</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/364506?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>百度<ul><li>补招岗位：开发测试工程师</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/364402?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>欢聚时代<ul><li>补招岗位：前端开发工程师</li><li>工作地点：广州</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/364505?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-02-03"><a href="#2020-02-03" class="headerlink" title="2020.02.03"></a>2020.02.03</h2><p>【今天更新的春招公司】</p><ul><li>用友<ul><li>工作地点：深圳，杭州，成都</li><li>岗位：研发、测试、产品、设计</li><li>投递时间：2020年2月19日止（网申、内推）</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/364382?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【已经开始春招的公司】</p><p>苏宁、宁波银行、VIVO、浙江中烟工业有限责任公司、用友、帆软、ATL新能源科技、光大科技、UBISOFT、广州速游、shopee、招银网络科技</p><p>投递详情请查看春招信息内推在线文档：<a href="https://docs.qq.com/sheet/DQUhCTmluRmtQWEpC?tab=ctxyzb&c=A17A0B0" target="_blank" rel="noopener">了解详情</a></p><h2 id="2020-01-22"><a href="#2020-01-22" class="headerlink" title="2020.01.22"></a>2020.01.22</h2><p>【今天新增补录公司】</p><ul><li>百度地图<ul><li>补招岗位：C++/PHP研发工程师、机器学习、移动开发、大数据研发</li><li>工作地点：北京/深圳</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/363441?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>百度小度云平台部<ul><li>补招岗位：C++/PHP研发工程师、机器学习</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/363443?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>百度自动驾驶技术部<ul><li>补招岗位：研发、算法岗</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/363440?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-21"><a href="#2020-01-21" class="headerlink" title="2020.01.21"></a>2020.01.21</h2><p>【今天新增补录公司】</p><ul><li>快手<ul><li>补招岗位：内容编辑管培生</li><li>工作地点：天津</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/363160?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>今日头条<ul><li>补招岗位：Android 开发工程师，IOS 开发工程师</li><li>工作地点：广州</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/363157?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>字节跳动AILAB<ul><li>补招岗位：算法</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/363148?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-17"><a href="#2020-01-17" class="headerlink" title="2020.01.17"></a>2020.01.17</h2><p>【今天更新的春招公司】</p><ul><li>招银网络科技<ul><li>工作地点：深圳，杭州，成都</li><li>投递时间：1月9日起（网申、内推）</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/361293?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>ATL新能源科技<ul><li>工作地点：宁德、东莞</li><li>投递时间：1月9日起（网申、内推）</li><li>网申链接：<a href="https://www.nowcoder.com/discuss/361882?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-16"><a href="#2020-01-16" class="headerlink" title="2020.01.16"></a>2020.01.16</h2><p>【今天更新的春招公司】</p><ul><li>帆软<ul><li>工作地点：全国</li><li>投递时间：2020年1季度起（网申、内推）</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/361185?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>猿辅导<ul><li>补招岗位：前端/客户端</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/361849?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-15"><a href="#2020-01-15" class="headerlink" title="2020.01.15"></a>2020.01.15</h2><p>【今天新增补录公司】</p><ul><li>抖音<ul><li>补招岗位：客户端研发、后端、多媒体客户端研发、图像研发、视频算法研发、多媒体桌面端研发、web前端研发、测试</li><li>工作地点：上海</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/360991?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>Jerry Ai<ul><li>补招岗位：软件工程师</li><li>工作地点：远程办公（业务表现优秀者可协助办理加拿大签证移民）</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/362125?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>百度知识图谱部<ul><li>补招岗位：研发岗</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/361486?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-14"><a href="#2020-01-14" class="headerlink" title="2020.01.14"></a>2020.01.14</h2><p>【今天更新的春招公司】</p><ul><li>shopee<ul><li>工作地点：深圳</li><li>投递时间：4月12日止（网申、内推）</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/362029?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li><li>内推链接：<a href="https://www.nowcoder.com/discuss/362122?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>华为<ul><li>补招岗位：软件开发、硬件技术、芯片、人工智能、算法、测试、材料</li><li>工作地点：北京、上海、深圳、杭州、西安、南京、武汉、成都、苏州、东莞</li><li>内推链接：<a href="https://mp.weixin.qq.com/s/QEt64ego_qyRadCqa1wVEw" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>百度推荐策略部<ul><li>补招岗位：机器学习/数据挖掘/自然语言处理工程师</li><li>工作地点：北京、上海</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/361443?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-13"><a href="#2020-01-13" class="headerlink" title="2020.01.13"></a>2020.01.13</h2><p>【今天更新的春招公司】</p><ul><li>浙江中烟工业有限责任公司<ul><li>工作地点：杭州、宁波</li><li>投递时间：1月8日-2月25日</li><li>投递链接：<a href="https://mp.weixin.qq.com/s/X4uzBfpbisE98QhoT0-I1w" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>广州速游<ul><li>工作地点：广州</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/361662?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>用友<ul><li>工作地点：北京、上海、成都、西安、郑州</li><li>投递时间：1月9日-2月19日</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/361274?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>ThoughtWorks<ul><li>补招岗位：软件开发工程师、软件测试工程师、业务需求分析师</li><li>工作地点：西安、武汉、成都、北京、深圳、海外</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/361902?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-10"><a href="#2020-01-10" class="headerlink" title="2020.01.10"></a>2020.01.10</h2><p>【今天更新的春招公司】</p><ul><li>VIVO（正式春招）<ul><li>工作地点：北京、上海、重庆、南京、杭州、深圳、东莞、海外、印度</li><li>投递时间：2月29日 12点截止</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/360732?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li><li>投递链接：<a href="https://hr.vivo.com/wt/vivo/web/index/CompvivoPagerecruit_School" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>航空工业信息技术中心（提前批）<ul><li>工作地点：北京</li><li>投递时间：1月15日 截止</li><li>岗位：软件开发工程师、算法工程师</li><li>投递链接：<a href="https://mp.weixin.qq.com/s/FAd_prd4k-yLcgv9_SGglw" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>用友2020届春招&amp;内推全面启动<ul><li>详情：<a href="https://mp.weixin.qq.com/s/450vMtis6hIO0dJmJPyHVA" target="_blank" rel="noopener">了解详情</a></li><li>内推码：<code>QrRy7j3m</code></li><li>投递入口：<ul><li>手机端：用友招聘公众号-校园招聘-校招职位</li><li>pc端：<a href="http://career.yonyou.com/" target="_blank" rel="noopener">了解详情</a></li><li>ps：简历申请时填写内推码才能内推成功</li></ul></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>百度 apollo-v2x 方向<ul><li>补招岗位：感知算法 / C++ / JAVA / 嵌入式 / 售前</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/360999?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>猿辅导<ul><li>补招岗位：开发 后端 前端 ios 安卓</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/360825?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>IBM CDL部门内推<ul><li>补招岗位：研发岗</li><li>工作地点：上海</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/360913?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>搜狐 校招 部门直招ing<ul><li>补招岗位：机器学习/深度学习/算法/java/Linux系统开发/运维/产品经理</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/361361?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>京东校招补招<ul><li>补招岗位：软件开发工程师(移动安全,Android客户端)</li><li>工作地点：上海</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/360842?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-07"><a href="#2020-01-07" class="headerlink" title="2020.01.07"></a>2020.01.07</h2><p>【今天更新的春招公司】</p><ul><li>牛客网<ul><li>工作地点：北京/上海/深圳</li><li>岗位：项目经理、大客户销售经理</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/360591?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>VIVO<ul><li>内推码：<code>11111219</code></li><li>笔试时间：03.01</li><li>面试时间：03.05-03.06、03.09-03.11</li><li>图片：<a href="https://i.loli.net/2020/01/07/nxsJw8oSd5Ml2YB.png" target="_blank" rel="noopener">点击查看</a></li><li>投递链接：<a href="https://hr.vivo.com/campus" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>抖音<ul><li>补招岗位：iOS开发工程师</li><li>工作地点：上海</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/360565?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>字节跳动-教育业务<ul><li>补招岗位：后端/Android/iOS/C++客户端/前端/测试/…</li><li>工作地点：北京、上海、深圳</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/359901?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>爱奇艺<ul><li>补招岗位：iOS开发工程师/Android开发工程师/算法工程师/测试开发工程师/C/C++开发工程师/Java开发工程师</li><li>工作地点：北京/上海</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/359843?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2020-01-02"><a href="#2020-01-02" class="headerlink" title="2020.01.02"></a>2020.01.02</h2><p>【今天更新的春招公司】</p><ul><li>苏宁春招之“互联网店长工程”<ul><li>岗位：互联网店长</li><li>工作地点：全国</li><li>投递链接：<a href="https://mp.weixin.qq.com/s/_fjz24rGX5QHzCXqx_jrDw" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>京东商城<ul><li>补招岗位：前端</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/358483?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>深信服<ul><li>补招岗位：C/C++研发/市场/人力资源管培/前端/测试/技术服务</li><li>工作地点：北京、深圳、长沙</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/358525?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>CVTE<ul><li>补招岗位：商务岗 / 人力资源</li><li>工作地点：具体询问内推人</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/358569?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2019-12-30"><a href="#2019-12-30" class="headerlink" title="2019.12.30"></a>2019.12.30</h2><p>【今天更新的春招公司】</p><ul><li>光大科技<ul><li>招聘时间：12月27日起（网申、内推）</li><li>招聘岗位：研发工程师、运维工程师、数据工程师、测试工程师、前端开发工程师、数据分析师</li><li>工作地点：北京</li><li>内推链接：<a href="https://www.nowcoder.com/discuss/358457?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><p>【今天新增补录公司】</p><ul><li>搜狐畅游<ul><li>补招岗位：策划、技术、设计、运营、职能</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/358142?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>ThoughtWorks<ul><li>补招岗位：技术岗</li><li>工作地点：北京、深圳、西安、成都</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/358194?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2019-12-28"><a href="#2019-12-28" class="headerlink" title="2019.12.28"></a>2019.12.28</h2><ul><li>有赞<ul><li>补招岗位：技术岗、非技术岗</li><li>工作地点：杭州</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/357947?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>运去哪<ul><li>补招岗位：IT岗、销售、智能、供应链、产品运营</li><li>工作地点：上海、合肥、宁波、深圳、天津、青岛、墨西哥</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/357934?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>bigo<ul><li>补招岗位：技术岗</li><li>工作地点：广州、北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/357978?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>智恒科技股份有限公司<ul><li>投递链接：<a href="http://www.fjrclh.com/newsshownew.asp?articleid=46159" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>广州日报数据和数字化研究院(GDI智库)<ul><li>投递链接：<a href="http://career.scnu.edu.cn/r-50122.html" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>上海华讯网络系统有限公司<ul><li>投递链接：<a href="http://job.hust.edu.cn/zpinfo1/842595.htm" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>武汉科信云图信息技术有限公司<ul><li>投递链接：<a href="http://www.xsjy.whu.edu.cn/zftal-web/zfjy!wzxx/xsgwsc_ckWzDwzpxx.html?zpxxbh=e19d734ed1bdbdcf82e584f53d5a6a4d&dwxxid=JG0011764" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><h2 id="2019-12-25"><a href="#2019-12-25" class="headerlink" title="2019.12.25"></a>2019.12.25</h2><ul><li>4399秋招补录<ul><li>投递链接：<a href="http://web.4399.com/campus/yjsgw/kaifalei/#1021248" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>有赞2020校招补录<ul><li>投递链接：<a href="https://www.nowcoder.com/discuss/357947?type=7" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>中信卡中心<ul><li>投递链接：<a href="http://campus.51job.com/creditcard_citicbank/" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>拼多多2020届秋招补录<ul><li>投递链接：<a href="https://www.pinduoduo.com/home/campus/" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>随手科技<ul><li>投递链接：<a href="https://app.mokahr.com/campus_apply/sui/3038#/?_k=otdpgx" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>北京永洪商智科技有限公司<ul><li>招聘链接：<a href="https://www.yonghongtech.com/gy/gzjh/" target="_blank" rel="noopener">了解详情</a></li><li>校招信息：<a href="http://www.job.ahu.edu.cn/detach.portal?.pmn=view&action=bulletinBrowser&.ia=false&.pen=pe2&bulletinId=5e967624-26e0-11ea-9b1b-ad1d61e1dd81" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>贵州乐诚技术有限公司<ul><li>校招信息：<a href="http://job.hust.edu.cn/zpinfo1/840886.htm" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>杭州融先科技有限公司<ul><li>校招信息：<a href="http://static.bibibi.net/student/chance/onlinerecruitmentdetail.html?token=yxqqnn1600000002&type=0&recruitment_id=925830" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>清北道远课堂<ul><li>招聘时间：12月起（内推 、网申）</li><li>招聘岗位：高中老师、教研主管、后端开发工程师、市场部讲师</li><li>工作地点：北京、深圳、武汉、成都、郑州</li><li>投递链接：<a href="https://mp.weixin.qq.com/s/xAOC8umd39YqMCDDao0MUg" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>字节跳动广告系统<ul><li>补招岗位：技术</li><li>工作地点：北京/深圳/上海/纽约/西雅图</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/356427?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>百度安全<ul><li>补招岗位：后端系统研发工程师</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/357007?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>苏宁（提前批）<ul><li>招聘时间：1月17截止（网申）</li><li>招聘岗位：集团管培生</li><li>工作地点：全国</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/357491?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>格力（提前批）<ul><li>招聘时间：1月8截止（网申）</li><li>招聘岗位：应用软件设计、制冷技术、结构设计、电控软件/硬件设计</li><li>工作地点：珠海</li><li>投递链接：<a href="https://mp.weixin.qq.com/s/GGTk8jjXVFXWhB7kCJpwcg" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>顶象技术<ul><li>补招岗位：算法岗、开发岗</li><li>工作地点：北京</li><li>投递链接：<a href="https://www.nowcoder.com/discuss/357295?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>浪潮（北京）电子信息产业有限公司<ul><li>投递链接：<a href="http://career.ouc.edu.cn/zftal-web/zfjy!ykfw/zpztgl_cxWzZpxxNry.html?id=56541" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>长威科技<ul><li>校招信息：<a href="http://www.fjrclh.com/newsshownew.asp?articleid=46137" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>广东雅仕格科技集团有限公司<ul><li>校招信息：<a href="http://static.bibibi.net/student/chance/onlinerecruitmentdetail.html?token=yxqqnn0000000002&type=0&recruitment_id=924526" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>泰康保险集团科技类岗位2020秋招补录<ul><li>校招信息：<a href="http://career.cic.tsinghua.edu.cn//xsglxt/f/jyxt/anony/showZwxx?zpxxid=137967405&type=" target="_blank" rel="noopener">了解详情</a></li></ul></li><li>当当补录<ul><li>投递链接：<a href="https://www.nowcoder.com/discuss/345193?from=ROYIANS.CN" target="_blank" rel="noopener">了解详情</a></li></ul></li></ul><blockquote><p>开始更新时间：2019-12-25.</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;以下内容来自各高校就业信息网、牛客网等，未经验证，请自行甄别，谨防受骗，部分企业可能在多个高校
      
    
    </summary>
    
    
    
      <category term="招聘" scheme="https://www.royians.cn/tags/%E6%8B%9B%E8%81%98/"/>
    
      <category term="工作" scheme="https://www.royians.cn/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>最后一课</title>
    <link href="https://www.royians.cn/2019/12.13.8cf1f8c0/"/>
    <id>https://www.royians.cn/2019/12.13.8cf1f8c0/</id>
    <published>2019-12-13T14:04:11.000Z</published>
    <updated>2019-12-13T14:10:32.700Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><p>那天早晨上学，我去得很晚，心里很怕韩麦尔先生骂我，况且他说过要问我们分词，可是我连一个字也说不上来。我想就别上学了，到野外去玩玩吧。<br><br>天气那么暖和，那么晴朗！</p><p>画眉在树林边宛转地唱歌；锯木厂后边草地上，普鲁士兵正在操练。这些景象，比分词用法有趣多了；可是我还能管住自己，急忙向学校跑去。</p><p>我走过镇公所的时候，看见许多人站在布告牌前边。最近两年来，我们的一切坏消息都是从那里传出来的：败仗啦，征发啦，司令部的各种命令啦我也不停步，只在心里思量：“又出了什么事啦？”</p><p>铁匠华希特带着他的徒弟也挤在那里看布告，他看见我在广场上跑过，就向我喊：“用不着那么快呀，孩子，你反正是来得及赶到学校的！”</p><p>我想他在拿我开玩笑，就上气不接下气地赶到韩麦尔先生的小院子里。</p><p>平常日子，学校开始上课的时候，总有一阵喧闹，就是在街上也能听到。开课桌啦，关课桌啦，大家怕吵捂着耳朵大声背书啦……还有老师拿着大铁戒尺在桌子上紧敲着，“静一点，静一点……”</p><p>我本来打算趁那一阵喧闹偷偷地溜到我的座位上去；可是那一天，一切偏安安静静的，跟星期日的早晨一样。我从开着的窗子望进去，看见同学们都在自己的座位上了；韩麦尔先生呢，踱来踱去，胳膊底下夹着那怕人的铁戒尺。我只好推开门，当着大家的面走进静悄悄的教室。你们可以想像，我那时脸多么红，心多么慌！</p><p>可是一点儿也没有什么。韩麦尔先生见了我，很温和地说：“快坐好，小弗郎士，我们就要开始上课，不等你了。”</p><p>我一纵身跨过板凳就坐下。我的心稍微平静了一点儿，我才注意到，我们的老师今天穿上了他那件挺漂亮的绿色礼服，打着皱边的领结，戴着那顶绣边的小黑丝帽。这套衣帽，他只在督学来视察或者发奖的日子才穿戴。而且整个教室有一种不平常的严肃的气氛。最使我吃惊的是，后边几排一向空着的板凳上坐着好些镇上的人，他们也跟我们一样肃静。其中有郝叟老头儿，戴着他那顶三角帽，有从前的镇长，从前的邮递员，还有些旁的人。个个看来都很忧愁。郝叟还带着一本书边破了的初级读本，他把书翻开，摊在膝头上，书上横放着他那副大眼镜。</p><p>我看见这些情形，正在诧异，韩麦尔先生已经坐上椅子，像刚才对我说话那样，又柔和又严肃地对我们说：“我的孩子们，这是我最后一次给你们上课了。柏林已经来了命令，阿尔萨斯和洛林的学校只许教德语了。新老师明天就到。今天是你们最后一堂法语课，我希望你们多多用心学习。”</p><p>我听了这几句话，心里万分难过。啊，那些坏家伙，他们贴在镇公所布告牌上的，原来就是这么一回事！</p><p>我的最后一堂法语课！</p><p>我几乎还不会作文呢！我再也不能学法语了！难道这样就算了吗？我从前没好好学习，旷了课去找鸟窝，到萨尔河上去溜冰……想起这些，我多么懊悔！我这些课本，语法啦，历史啦，刚才我还觉得那么讨厌，带着又那么沉重，现在都好像是我的老朋友，舍不得跟它们分手了。还有韩麦尔先生也一样。他就要离开了，我再也不能看见他了！想起这些，我忘了他给我的惩罚，忘了我挨的戒尺。</p><p>可怜的人！</p><p>他穿上那套漂亮的礼服，原来是为了纪念这最后一课！现在我明白了，镇上那些老年人为什么来坐在教室里。这好像告诉我，他们也懊悔当初没常到学校里来。他们像是用这种方式来感谢我们老师四十年来忠诚的服务，来表示对就要失去的国土的敬意。</p><p>我正想着这些的时候，忽然听见老师叫我的名字。轮到我背书了。天啊，如果我能把那条出名难学的分词用法从头到尾说出来，声音响亮，口齿清楚，又没有一点儿错误，那么任何代价我都愿意拿出来的。可是开头几个字我就弄糊涂了，我只好站在那里摇摇晃晃，心里挺难受，头也不敢抬起来。我听见韩麦尔先生对我说：</p><p>“我也不责备你，小弗郎士，你自己一定够难受的了。这就是了。大家天天都这么想：‘算了吧，时间有的是，明天再学也不迟。’现在看看我们的结果吧。唉，总要把学习拖到明天，这正是阿尔萨斯人最大的不幸。现在那些家伙就有理由对我们说了：‘怎么？你们还自己说是法国人呢，你们连自己的语言都不会说，不会写！……’不过，可怜的小弗郎士，也并不是你一个人的过错，我们大家都有许多地方应该责备自己呢。</p><p>“你们的爹妈对你们的学习不够关心。他们为了多赚一点儿钱，宁可叫你们丢下书本到地里，到纱厂里去干活儿。我呢，我难道就没有应该责备自己的地方吗？我不是常常让你们丢下功课替我浇花吗？我去钓鱼的时候，不是干脆就放你们一天假吗？……”</p><p>接着，韩麦尔先生从这一件事谈到那一件事，谈到法国语言上来了。他说，法国语言是世界上最美的语言最明白，最精确；又说，我们必须把它记在心里，永远别忘了它，亡了国当了奴隶的人民，只要牢牢记住他们的语言，就好像拿着一把打开监狱大门的钥匙。说到这里，他就翻开书讲语法。真奇怪，今天听讲，我全都懂。他讲的似乎挺容易，挺容易。我觉得我从来没有这样细心听讲过，他也从来没有这样耐心讲解过。这可怜的人好像恨不得把自己知道的东西在他离开之前全教给我们，一下子塞进我们的脑子里去。</p><p>语法课完了，我们又上习字课。那一天，韩麦尔先生发给我们新的字帖，帖上都是美丽的圆体字：“法兰西”“阿尔萨斯”“法兰西”“阿尔萨斯”。这些字帖挂在我们课桌的铁杆上，就好像许多面小国旗在教室里飘扬。个个都那么专心，教室里那么安静！只听见钢笔在纸上沙沙地响。有时候一些金甲虫飞进来，但是谁都不注意，连最小的孩子也不分心，他们正在专心画“杠子”，好像那也算是法国字。屋顶上鸽子咕咕咕咕地低声叫着，我心里想：“他们该不会强迫这些鸽子也用德国话唱歌吧！”</p><p>我每次抬起头来，总看见韩麦尔先生坐在椅子里，一动也不动，瞪着眼看周围的东西，好像要把这小教室里的东西都装在眼睛里带走似的。只要想想：四十年来，他一直在这里，窗外是他的小院子，面前是他的学生；用了多年的课桌和椅子，擦光了，磨损了；院子里的胡桃树长高了；他亲手栽的紫藤，如今也绕着窗口一直爬到屋顶了。可怜的人啊，现在要他跟这一切分手，叫他怎么不伤心呢？何况又听见他的妹妹在楼上走来走去收拾行李！他们明天就要永远离开这个地方了。</p><p>可是他有足够的勇气把今天的功课坚持到底。习字课完了，他又教了一堂历史。接着又教初级班拼他们的ba，be，bi，bo，bu。在教室后排座位上，郝叟老头儿已经戴上眼镜，两手捧着他那本初级读本，跟他们一起拼这些字母。他感情激动，连声音都发抖了。听到他古怪的声音，我们又想笑，又难过。啊！这最后一课，我真永远忘不了！</p><p>忽然教堂的钟敲了十二下。祈祷的钟声也响了。窗外又传来普鲁士兵的号声他们已经收操了。韩麦尔先生站起来，脸色惨白，我觉得他从来没有这么高大。</p><p>“我的朋友们啊，”他说，“我——我——”</p><p>但是他哽住了，他说不下去了。</p><p>他转身朝着黑板，拿起一支粉笔，使出全身的力量，写了两个大字：“法兰西万岁！”</p><p>然后他呆在那儿，头靠着墙壁，话也不说，只向我们做了一个手势：“放学了，你们走吧。”</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;那天早晨上学，我去得很晚，心里很怕韩麦尔先生骂我，况且他说过要问我们分词，可是我连一个字也说不上来。我想就别上学了，到野外去玩玩吧。&lt;br&gt;&lt;b
      
    
    </summary>
    
    
      <category term="文学" scheme="https://www.royians.cn/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="小说" scheme="https://www.royians.cn/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="勿忘国耻" scheme="https://www.royians.cn/tags/%E5%8B%BF%E5%BF%98%E5%9B%BD%E8%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>失根的兰花</title>
    <link href="https://www.royians.cn/2019/12.13.85adbe6b/"/>
    <id>https://www.royians.cn/2019/12.13.85adbe6b/</id>
    <published>2019-12-13T13:49:41.000Z</published>
    <updated>2019-12-13T14:13:59.534Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><p>顾先生一家约我去费城郊区一个小的大学里看花，汽车走了一个钟头的样子，到了校园，校园美得像首诗，也像幅画。依山起伏，古树成荫，绿藤爬满了一幢一幢的小楼，绿草爬满了一片一片的坡地，除了鸟语，没有声音。像一个梦，一个安静的梦。</p><p>花圃有两片，一片是白色的牡丹，一片是白色的雪球;在如海的树丛里，还有闪烁着如星光的丁香，这些花全是从中国来的吧。</p><p>由于这些花，我自然而然的想起北平公园里的花花朵朵，与这些简直没有两样，然而，我怎样也不能把童年时的情感再回忆起来。不知为什么，我总觉得这些花不该出现在这里。它们的背景应该是来今雨轩，应该是谐趣园，应该是殿宫阶台，或亭阁栅栏。因为背景变了，花的颜色也褪了，人的感情也落了。泪，不知为什么流下来。</p><p>十几岁，就在外面飘流，泪从来也未这样不知不觉的流过。在异乡见过与家乡完全相异的事物，也见过完全相同的事物，同也好，不同也好，我从未因异乡事物不同想过家。到渭水滨，那水，是我从来没有看见过的。我只感到新奇，并不感觉陌生;到咸阳城，那城，是我从来没有看见过的，我只感觉它古老，并不感觉伤感。我曾在秦岭中捡过与香山上同样红的枫叶;我也曾在蜀中看到与太庙中同样老的古松，我并未因而想起过家，虽然那些时候，我穷苦得像个乞丐，但胸中却总是有嚼菜根用以自励的精神，我曾骄傲地说过自己：“我，到处可以为家。”</p><p>然而，自至美国，情感突然变了。在夜里的梦中，常常是家里的小屋在风雨中坍塌了，或是母亲的头发一根一根的白了。在白天的生活中，常常是不爱看与故乡不同的东西，而又不敢看与故乡相同的东西。我这时才恍然悟到，我所谓的到处可以为家，是因为蚕未离开那片桑叶，等到离开国土一步，即到处均不可以为家了。</p><p>美国有本很著名的小说，里面穿插着一个中国人，这个中国人是生在美国的，然而长大之后，他却留着辫子，说不通的英语，其实他英语说得非常好。有一次，一不小心，将英文很流利地说出来，美国人自然因此知道他是生在美国的，问他，为什么偏要装成中国人呢。</p><p>他说：“我曾经剪过辫子，穿起西装，说着流利的英语，然而，我依然不能与你们混合，你们拿另一种眼光看我，我感觉痛苦……”</p><p>花搬到美国来，我们看着不顺眼;人搬到美国来，也是同样不安心。这时候才忆起，家乡土地之芬芳，与故土花草的艳丽。我曾记得，八岁时肩起小镰刀跟着叔父下地去割金黄的麦穗，而今这童年的彩色版画，成了我一生中不朽的绘图。</p><p>在沁凉如水的夏夜中，有牛郎织女的故事，才显得星光晶亮;在群山万壑中，有竹篱茅舍，才显得诗意盎然。在晨曦的原野中，有拙重的老牛，才显得纯朴可爱。祖国的山河，不仅是花木，还有可感可泣的故事，可吟可咏的诗歌，是儿童的喧哗笑语与祖宗的静肃墓庐，把它点缀得美丽了。</p><p>古人说，人生如萍，在水上乱流，那是因为古人未出国门，没有感觉到离国之苦，萍总还有水流可藉。以我看，人生如絮，飘零在此万紫千红的春天。</p><p>宋朝画家郑思肖，画兰，连根带叶均飘于空中，人问其故，他说：“国土沦亡，根着何处?”国，就是土，没有国的人，是没有根的草，不待风雨折磨，即形枯萎了。</p><p>我十几岁，即无家可归，并未觉其苦，十几年后，祖国已破，却深觉出个中滋味了。不是有人说：“头可断，血可流，身不可辱”吗?我觉得应该是：“身可辱，家可破，国不可亡。”</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      身可辱，家可破，国不可亡。
    
    </summary>
    
    
      <category term="文学" scheme="https://www.royians.cn/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="散文" scheme="https://www.royians.cn/tags/%E6%95%A3%E6%96%87/"/>
    
      <category term="勿忘国耻" scheme="https://www.royians.cn/tags/%E5%8B%BF%E5%BF%98%E5%9B%BD%E8%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>2019-祝我生日快乐</title>
    <link href="https://www.royians.cn/2019/11.28.f815fc22/"/>
    <id>https://www.royians.cn/2019/11.28.f815fc22/</id>
    <published>2019-11-28T01:07:14.000Z</published>
    <updated>2019-11-28T01:58:22.490Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><link rel="stylesheet" href="https://cdn.bootcss.com/plyr/3.5.6/plyr.css"><script src="https://cdn.bootcss.com/plyr/3.5.6/plyr.js"></script><video poster="https://api.dujin.org/bing/1920.php" id="player" playsinline controls><source id="video-player" src="https://mvvideoshare1.meitudata.com/582c187b60fb97839.mp4" type="video/mp4"></video><script>const player=new Plyr("#player")</script><p>今天是我的生日，哈哈。1997-2019，已经22年了。今年是个关键的一年，我大四了。即将毕业，现在我的生日愿望就是在年底之前找到一份让我满意的工作。</p><p>唉，自己未来到哪里发展，会发展成个什么样子都是未知数，只希望我能够让自己满意，让家里人满意。</p><p>还有就是找个我爱的人，爱我的人。母胎solo22年了😂。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      祝我生日快乐
    
    </summary>
    
    
      <category term="日常" scheme="https://www.royians.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日常" scheme="https://www.royians.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门</title>
    <link href="https://www.royians.cn/2019/11.26.6a343b7f/"/>
    <id>https://www.royians.cn/2019/11.26.6a343b7f/</id>
    <published>2019-11-26T03:55:56.000Z</published>
    <updated>2019-11-27T07:03:15.422Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><h2 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h2><p>NoSql = Not Only SQL，意思是不仅仅是SQL。NoSql是一项全新的数据库理念，指的是非关系型数据库，是对不同于传统的关系型数据库的数据库管理系统的统称。<br>NoSql用于超大规模数据的存储（例如Google或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多于操作就可以横向扩展。<br>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h3 id="NoSql和关系型数据库的比较"><a href="#NoSql和关系型数据库的比较" class="headerlink" title="NoSql和关系型数据库的比较"></a>NoSql和关系型数据库的比较</h3><ul><li>优点<ul><li>成本<br>NoSql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度<br>NoSql数据库将数据存储于缓存中，关系型数据库将数据存储在硬盘中，自然查询速度远不及NoSql数据库。</li><li>存储数据格式<br>NoSql的存储格式是<code>key:value</code>的形式、图片形式、文档形式等等，所以可以存储基础类型以及对象或者是集合等各种形式，而数据库则支支持基础类型。</li><li>扩展性<br>关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难</li></ul></li><li>缺点<ul><li>维护的工具和资料有限<br>因为NoSql是属于新的技术，不能和关系型数据库十几年的技术同日而语。</li><li>不提供对sql的是支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用的成本。</li><li>不提供关系型数据库对事物的事务处理。</li></ul></li></ul><h3 id="非关系型数据库的优势"><a href="#非关系型数据库的优势" class="headerlink" title="非关系型数据库的优势"></a>非关系型数据库的优势</h3><ul><li>性能<br>NoSql是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性：<br>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><h3 id="关系型数据库的优势"><a href="#关系型数据库的优势" class="headerlink" title="关系型数据库的优势"></a>关系型数据库的优势</h3><ul><li>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</li></ul><h3 id="主流产品"><a href="#主流产品" class="headerlink" title="主流产品"></a>主流产品</h3><ol><li>键值（Key-Value）存储数据库<ul><li>相关产品<ul><li>Tokyo Cabinet/Tyrant</li><li>Redis</li><li>Voldemort</li><li>Berkelry DB</li></ul></li><li>典型应用<br>内容缓存，主要用于处理大量数据的高访问负载</li><li>数据模型<br>一系列键值对</li><li>优势<br>快速查询</li><li>劣势<br>存储的数据缺少结构化</li></ul></li><li>列存储数据库<ul><li>相关产品<ul><li>Cassandra</li><li>HBase</li><li>Riak</li></ul></li><li>典型应用<br>分布式的文件系统</li><li>数据模型<br>以列簇式存储，将同一列数据存在一起</li><li>优势<br>查找速度快、可扩展性强，更容易进行分布式扩展</li><li>劣势<br>功能相对局限</li></ul></li><li>文档型数据库<ul><li>相关产品<ul><li>CouchDB</li><li>MongoDB</li></ul></li><li>典型应用<br>Web应用（与Key-Value类似，Value是结构化的）</li><li>数据模型<br>一系列键值对</li><li>优势<br>数据结构要求不严格</li><li>劣势<br>查询性能不高，而且缺乏统一的查询语法</li></ul></li><li>图形（Graph）数据库<ul><li>相关产品<ul><li>Neo4J</li><li>InfoGrid</li><li>Infinite Graph</li></ul></li><li>典型应用<br>社交网络</li><li>数据模型<br>图结构</li><li>优势<br>利用图结构相关算法</li><li>劣势<br>需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，<br>让NoSQL数据库对关系型数据库的不足进行弥补。<br>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Redis是一款高性能的NOSQL系列的非关系型数据库是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ol><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ol><h3 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h3><ol><li>缓存（数据查询、短链接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列（秒杀、抢购、12306等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒）</li><li>分布式集群架构中的session分离</li></ol><h3 id="Redis的下载、安装与配置"><a href="#Redis的下载、安装与配置" class="headerlink" title="Redis的下载、安装与配置"></a>Redis的下载、安装与配置</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>访问<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">github/MicrosoftArchive/redis</a>，下载Redis-x64-3.2.100.zip</p><p><img alt data-src="https://i.loli.net/2019/11/26/12FXyCIdVv7Qozp.png"></p><p><img alt data-src="https://i.loli.net/2019/11/26/ZpJbzXfrwMH4um7.png"></p><p>将压缩文件中的文件解压到单独的文件夹即可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis.windows.conf: 配置文件</span><br><span class="line">redis-cli.exe: redis 客户端</span><br><span class="line">redis-server.exe: redis 服务器端</span><br></pre></td></tr></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>访问<a href="https://redis.io/download" target="_blank" rel="noopener">Redis.io</a>，点击Download按钮。</p><p><img alt data-src="https://i.loli.net/2019/11/26/EK5z4GYgRiqaJQU.png"></p><p>或者使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xzf redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure><p>移动到解压后的文件夹并编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> redis-5.0.7</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>等待编译完成后，二进制文件就被编译到<code>src</code>文件夹中了，我们可以通过下面的命令运行Redis服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-server</span><br></pre></td></tr></table></figure><p>你可以使用redis的内置客户端操作redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli</span><br></pre></td></tr></table></figure><h3 id="试试看"><a href="#试试看" class="headerlink" title="试试看"></a>试试看</h3><p>以下的命令我们下次学，现在先来体验一下redis.</p><p>打开redis服务器端：</p><p><img alt data-src="https://i.loli.net/2019/11/26/zWQPFYBdqRipmAI.png"></p><p>打开客户端：</p><p><img alt data-src="https://i.loli.net/2019/11/26/SHtY18cNiIqsxKQ.png"></p><p>输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set msg &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get msg</span><br></pre></td></tr></table></figure><p><img alt data-src="https://i.loli.net/2019/11/26/dsnpWIymfHZ6rtR.png"></p><p>Bravo！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Redis入门教程，初识Redis，简要了解Redis基本操作，学习通过Java操作Redis
    
    </summary>
    
    
      <category term="Redis" scheme="https://www.royians.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://www.royians.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO</title>
    <link href="https://www.royians.cn/2019/11.20.94795185/"/>
    <id>https://www.royians.cn/2019/11.20.94795185/</id>
    <published>2019-11-20T02:28:49.000Z</published>
    <updated>2019-11-27T07:03:15.451Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><p>今天开始啃一下<a href="http://tutorials.jenkov.com/java-nio/" target="_blank" rel="noopener">Java NIO</a>这个教程，了解一下Java NIO。Java网络编程、文件什么的就一直不太熟悉，希望这次能对这些知识有很好的了解。</p><a id="more"></a><p>下午在写吧。。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;今天开始啃一下&lt;a href=&quot;http://tutorials.jenkov.com/java-nio/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java NIO&lt;/a&gt;这个教程，了解一下Java NIO。Java网络编程、文件什么的就一直不太熟悉，希望这次能对这些知识有很好的了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>值传递、引用传递</title>
    <link href="https://www.royians.cn/2019/11.19.8373f479/"/>
    <id>https://www.royians.cn/2019/11.19.8373f479/</id>
    <published>2019-11-19T09:22:15.000Z</published>
    <updated>2019-12-05T07:17:37.391Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>本文根据<a href="https://github.com/hollischuang/toBeTopJavaer/" title="toBeTopJavaer" target="_blank" rel="noopener">toBeTopJavaer</a>和《码出高效》补充学习Java</p></blockquote><p>Java是通过值传递来传递参数的，还是通过引用传递来传递的呢？这个争议由来已久。接下来看一看在Stack Overflow上<a href="https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="noopener">Is Java “pass-by-reference” or “pass-by-value”?</a>这个问题下，大家是怎么看的吧。</p><h2 id="观点一"><a href="#观点一" class="headerlink" title="观点一"></a>观点一</h2><p>我怕我翻译错，因此本来写了好多，最后还是用原文吧。</p><p>Stack Overflow上最高票(5558票)的观点是：</p><a id="more"></a><p>Java is always <strong>pass-by-value</strong>. Unfortunately, when we pass the value of an object, we are passing the <em>reference</em> to it. This is confusing to beginners.</p><p>It goes like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Dog aDog = <span class="keyword">new</span> Dog(<span class="string">"Max"</span>);</span><br><span class="line">  Dog oldDog = aDog;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we pass the object to foo</span></span><br><span class="line">  foo(aDog);</span><br><span class="line">  <span class="comment">// aDog variable is still pointing to the "Max" dog when foo(...) returns.</span></span><br><span class="line">  aDog.getName().equals(<span class="string">"Max"</span>); <span class="comment">// true</span></span><br><span class="line">  aDog.getName().equals(<span class="string">"Fifi"</span>); <span class="comment">//false</span></span><br><span class="line">  aDog == oldDog; <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Dog d)</span> </span>&#123;</span><br><span class="line">  d.getName().equals(<span class="string">"Max"</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// change d inside of foo() to point to a new Dog instance of "Fifi";</span></span><br><span class="line">  d = <span class="keyword">new</span> Dog(<span class="string">"Fifi"</span>);</span><br><span class="line">  d.getName().equals(<span class="string">"Fifi"</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the example above <code>aDog.getName()</code> will still return <code>&quot;Max&quot;</code>. The value aDog within <code>main</code> is not changed in the function <code>foo</code> with the <code>Dog &quot;Fifi&quot;</code> as the object reference is passed by value. If it were passed by reference, then the <code>aDog.getName()</code> in <code>main</code> would return <code>&quot;Fifi&quot;</code> after the call to <code>foo</code>.</p><p>Likewise:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Dog aDog = <span class="keyword">new</span> Dog(<span class="string">"Max"</span>);</span><br><span class="line">    Dog oldDog = aDog;</span><br><span class="line"></span><br><span class="line">    foo(aDog);</span><br><span class="line">    <span class="comment">// when foo(...) returns, the name of the dog has been changed to "Fifi"</span></span><br><span class="line">    aDog.getName().equals(<span class="string">"Fifi"</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// but it is still the same dog:</span></span><br><span class="line">    aDog == oldDog; <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Dog d)</span> </span>&#123;</span><br><span class="line">    d.getName().equals(<span class="string">"Max"</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// this changes the name of d to be "Fifi"</span></span><br><span class="line">    d.setName(<span class="string">"Fifi"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, <code>Fifi</code> is the dog’s name after call to <code>foo(aDog)</code> because the object’s name was set inside of <code>foo(...)</code>. Any operations that <code>foo</code> performs on <code>d</code> are such that, for all practical purposes, they are performed on <code>aDog</code>, but it is <strong>not</strong> possible to change the value of the variable <code>aDog</code> itself.</p><h2 id="观点二"><a href="#观点二" class="headerlink" title="观点二"></a>观点二</h2><p>I just noticed you referenced my <a href="http://javadude.com/articles/passbyvalue.htm" target="_blank" rel="noopener">article</a>.</p><p>Java规范说在Java中任何东西都是值传递，在Java中没有“引用传递”。</p><p>理解这个的关键是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog myDog;</span><br></pre></td></tr></table></figure><p>并<em>不是</em>一个Dog，而是一个指向Dog的<em>指针</em>。</p><p>什么意思呢？就是说当</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog myDog = <span class="keyword">new</span> Dog(<span class="string">"Rover"</span>);</span><br><span class="line">foo(myDog);</span><br></pre></td></tr></table></figure><p>的时候，你实际上给foo传递的是Dog对象的<em>地址</em>。</p><p>（我说“实际上”是因为Java指针并不是直接的地址，但是我们可以简单地把它理解为地址）</p><p>假设Dog对象的地址是在42，我们就把42传给foo方法。</p><p>如果我们是这样定义foo方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Dog someDog)</span> </span>&#123;</span><br><span class="line">    someDog.setName(<span class="string">"Max"</span>);     <span class="comment">// AAA</span></span><br><span class="line">    someDog = <span class="keyword">new</span> Dog(<span class="string">"Fifi"</span>);  <span class="comment">// BBB</span></span><br><span class="line">    someDog.setName(<span class="string">"Rowlf"</span>);   <span class="comment">// CCC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们看看发生了什么：</p><ul><li>someDog的值被设置为42</li><li>在AAA行，<ul><li>someDog is followed to the Dog it points to(the Dog object at address 42)（意会，但是不好翻译😂）</li><li>that Dog (the one at address 42) is asked to change his name to Max</li></ul></li><li>在BBB行<ul><li>新建了一个Dog对象，假设他的地址是74</li><li>我们把someDog的值赋值为74</li></ul></li><li>在CCC行<ul><li>someDog is followed to the Dog it points to (the Dog object at address 74)</li><li>that Dog (the one at address 74) is asked to change his name to Rowlf</li></ul></li><li>然后，return。</li></ul><p>接下来我们想一下，执行foo后发生了什么，myDog改变了吗？</p><p>关键来了。</p><p>记得myDog是一个指针，而不是一个实际的Dog，那么答案是否定的，myDog地址仍然是42，它仍然指向了原来的Dog（但是因为AAA行，所以它的名字改成了Max，仍但是同一个Dog，myDog的值-42从来没有改变）</p><p>It’s perfectly valid to follow an address and change what’s at the end of it; that does not change the variable, however.（不知道如何翻译）</p><p>Java的工作原理很像C，你可以指定一个指针，把这个指针传递给一个方法，铜鼓这个指针，方法可以改变这个指针指向的对象的数据，但是却不能改变这个指针的指向。</p><p>在C++、Ada、Pascal和其他一些支持引用传递的语言中，你可以真的改变传进来的参数的指向。</p><p>If Java had pass-by-reference semantics, the foo method we defined above would have changed where myDog was pointing when it assigned someDog on line BBB.</p><p>Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.</p><h2 id="Hollis的观点"><a href="#Hollis的观点" class="headerlink" title="Hollis的观点"></a>Hollis的观点</h2><p>大神在他的toBeTopJavaer中是这样写的：</p><blockquote><p>值传递（pass by value）是指在调用函数时将实际参数<code>复制</code>一份传递到函数中，这样在函数中如果对<code>参数</code>进行修改，将不会影响到实际参数。<br>引用传递（pass by reference）是指在调用函数时将实际参数的地址<code>直接</code>传递到函数中，那么在函数中对<code>参数</code>所进行的修改，将影响到实际参数。</p></blockquote><p>那么，我来给大家总结一下，值传递和引用传递之前的区别的重点是什么。</p><p><img alt data-src="https://i.loli.net/2019/11/20/SheinBuyfvpagq7.png"></p><p>你有一把钥匙，当你的朋友想要去你家的时候，如果你直接把你的钥匙给他了，这就是引用传递。这种情况下，如果他对这把钥匙做了什么事情，比如他在钥匙上刻下了自己名字，那么这把钥匙还给你的时候，你自己的钥匙上也会多出他刻的名字。</p><p>你有一把钥匙，当你的朋友想要去你家的时候，你复刻了一把新钥匙给他，自己的还在自己手里，这就是值传递。这种情况下，他对这把钥匙做什么都不会影响你手里的这把钥匙。</p><p>但是，不管上面那种情况，你的朋友拿着你给他的钥匙，进到你的家里，把你家的电视砸了。那你说你会不会受到影响？而我们在pass方法中，改变user对象的name属性的值的时候，不就是在“砸电视”么。</p><p>我们来画一张图，看一下整个过程中发生了什么，然后我再告诉你，为啥Java中只有值传递。</p><p><img alt data-src="https://i.loli.net/2019/11/20/nZ43cGxIyflsDvq.png"></p><p>上面这种传递是什么传递？肯定不是引用传递，如果是引用传递的话，在<code>user=new User()</code>的时候，实际参数的引用也应该改为指向0X456789，但是实际上并没有。</p><p>通过概念我们也能知道，这里是把实际参数的引用的地址复制了一份，传递给了形式参数。所以，<strong>上面的参数其实是值传递，把实参对象引用的地址当做值传递给了形式参数</strong>。</p><p>我们再来回顾下之前的那个“砸电视”的例子，看那个例子中的传递过程发生了什么。</p><p><img alt data-src="https://i.loli.net/2019/11/20/vXZoHCwJbeKy3x8.png"></p><p>同样的，在参数传递的过程中，实际参数的地址0X1213456被拷贝给了形参，只是，在这个方法中，并没有对形参本身进行修改，而是修改的形参持有的地址中存储的内容。</p><p>所以，值传递和引用传递的区别并不是传递的内容。而是实参到底有没有被复制一份给形参。在判断实参内容有没有受影响的时候，要看传的的是什么，如果你传递的是个地址，那么就看这个地址的变化会不会有影响，而不是看地址指向的对象的变化。就像钥匙和房子的关系。</p><p>那么，既然这样，为啥上面同样是传递对象，传递的String对象和User对象的表现结果不一样呢？我们在pass方法中使用name = “hollischuang”;试着去更改name的值，阴差阳错的直接改变了name的引用的地址。因为这段代码，会new一个String，在把引用交给name，即等价于name = new String(“hollischuang”);。而原来的那个”Hollis”字符串还是由实参持有着的，所以，并没有修改到实际参数的值。</p><p><img alt data-src="https://i.loli.net/2019/11/20/rCGlPw9gDhxNKHR.png"></p><p><strong>所以说，Java中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论是值传递还是引用传递，其实都是一种求值策略(<a href="https://en.wikipedia.org/wiki/Evaluation_strategy" target="_blank" rel="noopener">Evaluation strategy</a>)。在求值策略中，还有一种叫做按共享传递(call by sharing)。其实Java中的参数传递严格意义上说应该是按共享传递。</p><blockquote><p>按共享传递，是指在调用函数时，传递给函数的是实参的地址的拷贝（如果实参在栈中，则直接拷贝该值）。在函数内部对参数进行操作时，需要先拷贝的地址寻找到具体的值，再进行操作。如果该值在栈中，那么因为是直接拷贝的值，所以函数内部对参数进行操作不会对外部变量产生影响。如果原来拷贝的是原值在堆中的地址，那么需要先根据该地址找到堆中对应的位置，再进行操作。因为传递的是地址的拷贝所以函数内对值的操作对外部变量是可见的。</p></blockquote><p>简单点说，Java中的传递，是值传递，而这个值，实际上是对象的引用。</p><p>而按共享传递其实只是按值传递的一个特例罢了。所以我们可以说Java的传递是按共享传递，或者说Java中的传递是值传递。</p><h2 id="原文及参考"><a href="#原文及参考" class="headerlink" title="原文及参考"></a>原文及参考</h2><ol><li><a href="https://github.com/hollischuang/toBeTopJavaer/blob/master/basics/java-basic/java-pass-by.md" target="_blank" rel="noopener">toBeTopJavaer</a></li><li><a href="https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="noopener">Is Java “pass-by-reference” or “pass-by-value”?</a></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文根据&lt;a href=&quot;https://github.com/hollischuang/toBeTopJavaer/&quot; title=&quot;toBeTopJavaer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;toBeTopJavaer&lt;/a&gt;和《码出高效》补充学习Java&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Java是通过值传递来传递参数的，还是通过引用传递来传递的呢？这个争议由来已久。接下来看一看在Stack Overflow上&lt;a href=&quot;https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Is Java “pass-by-reference” or “pass-by-value”?&lt;/a&gt;这个问题下，大家是怎么看的吧。&lt;/p&gt;&lt;h2 id=&quot;观点一&quot;&gt;&lt;a href=&quot;#观点一&quot; class=&quot;headerlink&quot; title=&quot;观点一&quot;&gt;&lt;/a&gt;观点一&lt;/h2&gt;&lt;p&gt;我怕我翻译错，因此本来写了好多，最后还是用原文吧。&lt;/p&gt;&lt;p&gt;Stack Overflow上最高票(5558票)的观点是：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的三大基本特征和五大基本原则</title>
    <link href="https://www.royians.cn/2019/11.19.ed2b3e4/"/>
    <id>https://www.royians.cn/2019/11.19.ed2b3e4/</id>
    <published>2019-11-19T02:20:15.000Z</published>
    <updated>2019-11-27T07:03:15.436Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>本文根据<a href="https://github.com/hollischuang/toBeTopJavaer/" title="toBeTopJavaer" target="_blank" rel="noopener">toBeTopJavaer</a>和《码出高效》补充学习Java</p></blockquote><h2 id="面向对象的三大基本特征"><a href="#面向对象的三大基本特征" class="headerlink" title="面向对象的三大基本特征"></a>面向对象的三大基本特征</h2><p>传统意义上，面向对象有三大特性：封装、继承、多态。在《码出高效》中，将“抽象”也作为面向对象的特性之一，支持“四大特征”的说法。手册解释道：</p><blockquote><p>抽象是程序员的核心素养之一，体现出程序员对业务的建模能力，以及对架构的宏观掌控力。虽然面向过程也需要进行一定的抽象能力，但是相对来说，面向对象思维，以对象模型为核心，丰富模型的内涵，扩展模型的外延，通过模型的行为组合去共同解决某一类问题，抽象能力显得尤为重要。</p></blockquote><a id="more"></a><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。封装是面向对象的特征之一，是对象和类概念的主要特性。简单地说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。通过继承创建的新类被称为“子类”或“派生类”，被继承的类被称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”和“组合”来实现。继承概念的实现方式有两类：实现继承和接口继承。实现继承是指直接使用基类的属性和方法而无需额外的编码能力；接口继承是指仅使用属性和方法的名称，但是子类必须提供实现的能力。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>所谓多态就是指一个类实例的相同方法在不同情形下有不同的表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p><p>最常见的多态就是将子类传入父类参数中，运行时调用父类方法时通过传入的子类决定具体的内部结构或行为。</p><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>抽象是面向对象思想最基础的能力之一，正确而严谨的业务抽象和建模分析能力是后续的封装、继承、多态的基础，是软件大厦的及时。在面向对象思维中，抽象分为归纳和演绎。前者是从具体到本质，从个性到共性，将一类对象的共同特征进行归一化的逻辑思维过程；后者是从本质到具体，从共性到个性，逐步形象化的过程。在归纳的过程中，需要抽象出对象的属性和行为的共性，难度大于演绎。演绎是在已有问题解决方案的基础上，正确地找到合适的使用场景。演绎错误在使用集合时比较常见，比如针对查多改少的业务场景，使用链表是非常不合理的；底层框架技术选型时如果偶错误，则可能导致技术架构完全不适应业务的快速发展。</p><h2 id="面向对象的五大基本原则"><a href="#面向对象的五大基本原则" class="headerlink" title="面向对象的五大基本原则"></a>面向对象的五大基本原则</h2><p>以上即是面向对象的三大基本特征。接下来我们讲五大原则：</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看作是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。专注，是一个人优良的品质；同样地，单一也是一个类的优良设计。交杂不清的职责将会使得代码看起来特别别扭，牵一发而动全身，又是美感和必然导致丑陋的系统错误的风险。</p><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><p>其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改是封闭的。开放封闭原则主要体现在两个方面：</p><ul><li>对扩展开放。意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li><li>对修改封闭。意味着类一旦设计完成，就可以独立完成其工作，而不需要对其进行任何修改。</li></ul><p>实现开放封闭原则的核心思想就是对抽象编程，而不是对具体编程。因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有的行为，实现新的拓展方法，所以就是开放的。“需求总是变化”，没有不变的软件，所以就需要用等比开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p><h3 id="Liskov替换原则"><a href="#Liskov替换原则" class="headerlink" title="Liskov替换原则"></a>Liskov替换原则</h3><p>里氏替换原则的核心思想是：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换积累，但是基类不一定能替换子类。里氏替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵了里氏替换原则，才能保证继承服用是可靠的。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过<code>Extract Abstract Class</code>，在子类中通过覆写父类的方法实现新的方式支持同样的职责。里氏替换原则是关于继承机制的设计原则，违反里氏替换原则就必然导致违反开放-封闭原则。里氏替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。</p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同时依赖于抽象；抽象不依赖于具体，具体依赖于抽象。我们知道，类一定会存在类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口，以此来邮箱控制耦合关系，达到依赖于抽象的设计目标。抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一成不变的。依赖于抽象，就是对接口编程，不要对实现编程。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”的接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而“胖”接口存在明显的弊端，会导致实现的类型并非需要所有的接口定义，这在设计上这是浪费，而且在实施上这会带来潜在的问题，对“胖”接口的修改将导致一连串的客户端程序需要修改，有时候这是一种灾难。在这种情况下将“胖”接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端不会依赖于他们不用的方法。分离的手段主要有以下两种：</p><ul><li>委托分离。通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接以来，但是会增加系统的开销。</li><li>多重继承分离。通过接口多继承来实现客户的需求，这种方法是较好的。</li></ul><p>以上就是五个基本的面向对象设计原则，他们就像面向对象程序设计中的金科玉律，遵守他们可以使我们的代码更加鲜活，易于复用，易于拓展，灵活优雅。不同的设计模式对应不同的需求，而设计原则则代表永恒的灵魂，需要在实践中时时刻刻的遵守。就如ARTHUR J.RIEL在那本《OOD启示录》中所说的：</p><blockquote><p>你并不必严格遵守这些原则，违背他们也不会被初一宗教刑罚。但是你应当把这些原则看作警铃，若违背了其中一条，那么警铃就会响起</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>面向对象三大特征：<ul><li><strong>封装(Encapsulation)</strong></li><li><strong>继承(Inheritance)</strong></li><li><strong>多态(Polymorphism)</strong></li></ul></li><li>面向对象五大基本原则：<ul><li><strong>单一职责原则（Single-Resposibility Principle）</strong></li><li><strong>开放封闭原则（Open-Closed principle）</strong></li><li><strong>Liskov替换原则（Liskov-Substitution Principle）</strong></li><li><strong>依赖倒置原则（Dependecy-Inversion Principle）</strong></li><li><strong>接口隔离原则（Interface-Segregation Principle）</strong></li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文根据&lt;a href=&quot;https://github.com/hollischuang/toBeTopJavaer/&quot; title=&quot;toBeTopJavaer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;toBeTopJavaer&lt;/a&gt;和《码出高效》补充学习Java&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;面向对象的三大基本特征&quot;&gt;&lt;a href=&quot;#面向对象的三大基本特征&quot; class=&quot;headerlink&quot; title=&quot;面向对象的三大基本特征&quot;&gt;&lt;/a&gt;面向对象的三大基本特征&lt;/h2&gt;&lt;p&gt;传统意义上，面向对象有三大特性：封装、继承、多态。在《码出高效》中，将“抽象”也作为面向对象的特性之一，支持“四大特征”的说法。手册解释道：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;抽象是程序员的核心素养之一，体现出程序员对业务的建模能力，以及对架构的宏观掌控力。虽然面向过程也需要进行一定的抽象能力，但是相对来说，面向对象思维，以对象模型为核心，丰富模型的内涵，扩展模型的外延，通过模型的行为组合去共同解决某一类问题，抽象能力显得尤为重要。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java和C++的区别</title>
    <link href="https://www.royians.cn/2019/11.19.23f0b989/"/>
    <id>https://www.royians.cn/2019/11.19.23f0b989/</id>
    <published>2019-11-19T01:16:55.000Z</published>
    <updated>2019-11-27T07:03:15.316Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>本文根据<a href="https://snailclimb.top/JavaGuide/" title="Java Guide" target="_blank" rel="noopener">Java Guide</a>补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide</p></blockquote><p>Java语言是由C++发展而来的，保留大部分C++的内容，编程方式也类似于C++。但是Java的语法更清晰、规模更小、更易学。Sun公司对多种程序设计语言进行了深入研究，并摒弃了其它语言的不足之处，最终推出了Java。正是这样，<a id="more"></a>Java 从根本上解决了C++的固有缺陷，形成了一种新的完全面向对象的语言。Java和C/C++的相似之处多于不同之处，这里列出一些显著的区别。</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>Java没有指针的概念，从而有效地防止了C/C++语言中，容易出现的指针操作失误（如指针悬空所造成的系统崩溃）。在C/C++中，指针操作内存时，经常会出现错误。在Java中没有指针，更有利于Java程序的安全。</p><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>C++支持多重继承，它允许多个父类派生出一个子类。也就是说，一个类允许继承多个父类。尽管多重继承功能很强，但使用复杂，而且会引出许多麻烦，编译程序实现他也很不容易。所以Java不支持多重继承，但允许一个类实现多个接口。可见，Java既实现了C++多重继承的功能，又避免了C++的许多缺陷。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java是完全面向对象的语言，所有的方法和数据都必须是类的一部分。除了基本数据类型之外，其余类型的数据都作为对象型数据。例如对象型数据包括字符串和数组。类将数据和方法结合起来，把他们封装在其中，这样每个对象都可以实现具有自己特点的行为。而C++将函数和变量定义为全局的，然后再来调用这些函数和变量，从而增加了程序的负担。此外Java还取消了C/C++中的结构和联合，使编译程序更加简洁。</p><h2 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h2><p>Java程序中的所有对象都是使用new操作符建立在堆栈上的，这个操作符类似于C++的new操作符。Java自动进行无用内存回收操作，不需要程序员进行删除。当Java中的一个对象不再被用到时，无需使用内存回收器，只需要给他加上标签以示删除。无用内存的回收器在后台运行，利用哦哪个先实践工作。而C++中必须有程序释放内存资源，增加了程序设计者的负担。</p><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><p>Java不支持操作符重载，操作符重载被认为是C++的突出特征。在Java中虽然类可以实现这样的功能，但不支持操作符重载，这样是为了保持Java的语言尽可能的简单。</p><h2 id="预处理功能"><a href="#预处理功能" class="headerlink" title="预处理功能"></a>预处理功能</h2><p>C/C++在编译过程中都有一个与编译阶段，即预处理器。预处理器为开发人员提供了方便，但增加了编译的复杂性。Java允许预处理，但不支持预处理器功能，因为Java没有预处理器，所以为了实现与处理，它提供了引入语句（import），它与C++预处理器的功能类似。</p><h2 id="Java-不支持缺省函数参数，而-C-支持"><a href="#Java-不支持缺省函数参数，而-C-支持" class="headerlink" title="Java 不支持缺省函数参数，而 C++支持"></a>Java 不支持缺省函数参数，而 C++支持</h2><p>在 C 中，代码组织在函数中，函数可以访问程序的全局变量。C++增加了类，提供了类算法，该算法是与类相连的函数，C++类方法与 Java 类方法十分相似。由于 C++仍然支持 C，所以 C++程序中仍然可以使用 C 的函数，结果导致函数和方法混合使用，使得 C++程序比较混乱。Java 没有函数，作为一个比 C++更纯的面向对象的语言。Java 强迫开发人员把所有例行程序包括在类中。事实上，用方法实现例行程序可激励开发人员更好地组织编码。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>C和C++不支持字符换变量，在C和C++程序中使用Null终止符代表字符串的结束，在Java中字符串使用类对象（String和StringBuffer）来实现的，在整个系统中建立字符串和访问字符串元素的方法是一致的。Java字符串类是作为Java语言的一部分定义的，而不是作为外加的延伸部分。此外，Java还可以对字符串用+进行连接操作。</p><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p>“可怕”的 goto 语句是 C 和 C++的“遗物”。它是该语言技术上的合法部分，引用 goto语句造成了程序结构的混乱，不易理解。goto 语句一般用于无条件转移子程序和多结构分支技术。Java 不提供 goto 语句，其虽然指定 goto 作为关键字，但不支持它的使用，这使程序更简洁易读。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>在 C 和 C++中，有时出现数据类型的隐含转换，这就涉及了自动强制类型转换问题。例如，在 C++中可将一个浮点值赋予整型变量，并去掉其尾数。Java 不支持 C++中的自动强制类型转换，如果需要，必须由程序显式进行强制类<br>型转换。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li><li>Java为解释性语言,其运行过程为:程序源代码经过Java编译器编译成字节码,然后由JM解释执行。而C/C++为编译型语言,源代码经过编译和链接后生成可执行的二进制代码。因此,Java的执行速度比C/C++慢,但是Java能够跨平台执行,而C/C++不能。</li><li>Java为纯面向对象语言,所有代码(包括函数、变量等)必须在类中实现,除基本数据类型(包括int、foat等)外,所有类型都是类。此外,Java语言中不存在全局变量或全局函数,而C++兼具面向过程和面向过程编程的特点,可以定义全局变量和全局函数。</li><li>与C/C++语言相比,Java语言中没有指针的概念,这有效防止了C/C++语言中操作指针可能引起的系统问题,从而使程序变得更加安全</li><li>与C++语言相比,Java语言不支持多重继承,但是Java语言引入了接口的概念,可以同时实现多个接口。由于接口也具有多态特性,因此在Java语言中可以通过实现多个接口来实现与C++语言中多重继承类似的目的。</li><li>在C++语言中,需要开发人员去管理对内存的分配(包括申请与释放),而Java语言提供了垃圾回收器来实现垃圾的自动回收,不需要程序显式地管理内存的分配。在C++语言中,通常都会把释放资源的代码放到析构函数中,Java语言中虽然没有析构函数,但却引入了一个 finalize()方法,当垃圾回收器将要释放无用对象的内存时,会首先调用该对象的 finalize()方法,因此,开发人员不需要关心也不需要知道对象所占的内存空间何时会被释放</li><li>C++语言支持运算符重载,而Java语言不支持运算符重载。</li><li>C++语言支持预处理,而Java语言没有预处理器,虽然不支持预处理功能(包括头文件、宏定义等),但它提供的import机制与C++中的预处理器功能类似。</li><li>C++支持默认函数参数,而Java不支持默认函数参数。</li><li>C/C++支持goto语句,而Java不提供goto语句(但Java中goto是保留关键字)。</li><li>C/C++支持自动强制类型转换,这会导致程序的不安全;而Java不支持自动强制类型转换,必须由开发人员进行显式地强制类型转换。</li><li>C/C++中,结构和联合的所有成员均为公有,这往往会导致安全性问题的发生,而Java根本就不包含结构和联合,所有内容都封装在类里</li><li>Java具有平台无关性,即对每种数据类型都分配固定长度,例如,int类型总是占据32位,而C/C++却不然,同一个数据类型在不同的平台上会分配不同的字节数</li><li>Java提供对注释文档的内建支持,所以源码文件也可以包含它们自己的文档。通过一个单独的程序,这些文档信息可以提取出来,并重新格式化成HTML。</li><li>Java包含了一些标准库,用于完成特定的任务,同时这些库简单易用,能够大大缩短开发周期,例如,Java提供了用于访问数据库的JDBC库,用于实现分布式对象的RMI等标准库C++则依靠一些非标准的、由其他厂商提供的库。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/e14d9b380ddb" title="作者：南城无霜 来源：简书" target="_blank" rel="noopener">JAVA与C，C++的区别</a><br><a href="https://www.jianshu.com/p/2e3bccad112d" title="作者：月影诉残心 来源：简书" target="_blank" rel="noopener">T-15- Java 基础知识 | Java 与 C++区别</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文根据&lt;a href=&quot;https://snailclimb.top/JavaGuide/&quot; title=&quot;Java Guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java Guide&lt;/a&gt;补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Java语言是由C++发展而来的，保留大部分C++的内容，编程方式也类似于C++。但是Java的语法更清晰、规模更小、更易学。Sun公司对多种程序设计语言进行了深入研究，并摒弃了其它语言的不足之处，最终推出了Java。正是这样，
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
      <category term="Java Guide" scheme="https://www.royians.cn/tags/Java-Guide/"/>
    
  </entry>
  
  <entry>
    <title>JVM还支持哪些语言</title>
    <link href="https://www.royians.cn/2019/11.18.9867c63d/"/>
    <id>https://www.royians.cn/2019/11.18.9867c63d/</id>
    <published>2019-11-18T08:11:32.000Z</published>
    <updated>2019-11-27T07:03:15.325Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><p>JVM虚拟机并不是只支持Java语言的，你可以选择多种多样JVM编程语言去实现你的项目。这些语言最终都会被编译为字节码存储到JVM能够执行的字节码文件中去。最终，这些编程语言都会在现成的JVM上得到有效的优化。</p><a id="more"></a><p>这些JVM编程语言被分为三类：那些拥有Java不曾拥有的特性的语言；那些从现有语言移植到JVM的语言，那些research languages。</p><h2 id="第一个分类"><a href="#第一个分类" class="headerlink" title="第一个分类"></a>第一个分类</h2><p>第一个分类描述的是一些包含了比Java语言更多特性的语言，能够让程序员用更简洁的代码来编写程序。Java SE8 引入了lambda表达式、Stream API和默认方法（default methods，暂译）来解决代码简洁的问题。然而，开发者还喜欢很多其他的特性，比如字符集合（collections literals）、字符匹配（pattern matching）和更复杂的类型推断（more sophisticated type inference），这些特性在Java中还没有。</p><p>而属于第一类语言的就有 Scala, Groovy, Xtend, Ceylon, Kotlin, 和 Fantom几种。</p><h2 id="第二个分类"><a href="#第二个分类" class="headerlink" title="第二个分类"></a>第二个分类</h2><p>第二个分类中的语言是移植到JVM的已知语言，比如Python和Ruby，他们都可以和Java API进行交互，并且在脚本编写和快速原型设计方面很受欢迎。</p><p>Python（CPython）和Ruby（Ruby MRI）的标准实现均具有全局解释器锁，这会阻止它们充分利用多核系统。然而Jython和JRuby（Python和Ruby在JVM上的实现），通过使用Java的线程来摆脱了这种限制。</p><p>另一个广受欢迎的移植到JVM上的语言是Clojure（一种Lisp的衍生语言（a dialect of Lisp，暂译）），我们将在本文中介绍。另外，Oracle最近发布了Nashorn，该项目使您可以在JVM上运行JavaScript。</p><h2 id="第三个分类"><a href="#第三个分类" class="headerlink" title="第三个分类"></a>第三个分类</h2><p>第三类是实现新研究思想，仅适用于特定领域或只是实验性的语言。我们将在本文中介绍的语言X10是为实现高性能并行计算的高效编程而设计的。此类别中的另一种语言是Oracle Labs的Fortress，现已停产。</p><p>对于上文提到的每种语言，下面都会提供一个简单概览，以使您了解该语言支持什么以及如何使用它。</p><h2 id="语言概览"><a href="#语言概览" class="headerlink" title="语言概览"></a>语言概览</h2><h3 id="1-Scala"><a href="#1-Scala" class="headerlink" title="1 | Scala"></a>1 | Scala</h3><p><a href="//www.scala-lang.org/">Scala</a> is a statically typed programming language that fuses the object-oriented model and functional programming ideas. That means, in practice, that you can declare classes, create objects, and call methods just like you would typically do in Java. However, Scala also brings popular features from functional programming languages such as pattern matching on data structures, local type inference, persistent collections, and tuple literals.</p><p>The fusion of object-oriented and functional features lets you use the best tools from both worlds to solve a particular problem. As a result, Scala often lets programmers express algorithms more concisely than in Java.</p><p><strong>Feature focus: pattern matching.</strong> To illustrate, take a tree structure that you would like to traverse. <strong>Listing 1</strong> shows a simple expression language consisting of numbers and binary operations.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Java</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expr</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123; int <span class="keyword">val</span>; ... &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinOp</span> <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123; <span class="type">String</span> opname; <span class="type">Expr</span> left, right; ... &#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 1</strong></p><p>Say you’re asked to write a method to simplify some expressions. For example “5 / 1” can be simplified to “5.” The tree for this expression is illustrated in <strong>Figure 1</strong>.</p><p><img alt="Architect-languages-f1" data-src="//www.oracle.com/ocom/groups/public/@otn/documents/digitalasset/2267342.jpg"></p><p><strong>Figure 1</strong></p><p>In Java, you could deconstruct this tree representation by using <code>instanceof</code>, as shown in <strong>Listing 2</strong>. Alternatively, a common design pattern for separating an algorithm from its domain is the visitor design pattern, which can alleviate some of the verbosity. See <strong>Listing 3</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Java]</span><br><span class="line"></span><br><span class="line"><span class="function">Expr <span class="title">simplifyExpression</span><span class="params">(Expr expr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (expr <span class="keyword">instanceof</span> BinOp</span><br><span class="line">          &amp;&amp; <span class="string">"/"</span>.equals(((BinOp)expr).opname)</span><br><span class="line">          &amp;&amp; ((BinOp)expr).right <span class="keyword">instanceof</span> Number</span><br><span class="line">          &amp;&amp; ... <span class="comment">// it’s all getting very clumsy</span></span><br><span class="line">          &amp;&amp; ... ) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Binop)expr.left;</span><br><span class="line">     &#125;</span><br><span class="line">     ... <span class="comment">// other simplifications</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplifyExprVisitor</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Expr <span class="title">visit</span><span class="params">(BinOp e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"/"</span>.equals(e.opname) &amp;&amp; </span><br><span class="line">e.right <span class="keyword">instanceof</span> Number &amp;&amp; ...)&#123;</span><br><span class="line">            <span class="keyword">return</span> e.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 3</strong></p><p>However, this pattern introduces a lot of boilerplate. First, domain classes need to provide an <code>accept</code> method to use a visitor. You then need to implement the “visit” logic.</p><p>In Scala, the same problem can be tackled using pattern matching. See <strong>Listing 4</strong>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Scala</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplifyExpression</span></span>(expr: <span class="type">Expr</span>): <span class="type">Expr</span> = expr <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">BinOp</span>(<span class="string">"+"</span>, e, <span class="type">Number</span>(<span class="number">0</span>)) =&gt; e   <span class="comment">// Adding zero</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">BinOp</span>(<span class="string">"*"</span>, e, <span class="type">Number</span>(<span class="number">1</span>)) =&gt; e   <span class="comment">// Multiplying by one</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">BinOp</span>(<span class="string">"/"</span>, e, <span class="type">Number</span>(<span class="number">1</span>)) =&gt; e   <span class="comment">// Dividing by one</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; expr                       <span class="comment">// Can’t simplify expr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 4</strong></p><h3 id="2-Groovy"><a href="#2-Groovy" class="headerlink" title="2 | Groovy"></a>2 | Groovy</h3><p>Groovy is a dynamically typed object-oriented language. Groovy’s dynamic nature lets you manipulate your code in powerful ways. For example, you can expand objects at runtime (for example, by adding fields or methods).</p><p>However, Groovy also provides optional static checking, which means that you can catch errors at compile time (for example, calling an undefined method will be reported as an error before the program runs, just as in Java). As a result, programmers who feel that they are more productive without types getting in their way can embrace Groovy’s dynamic nature. Nonetheless, they can also opt to gradually use static checking later if they wish. In addition, Groovy is friendly to Java programmers because almost all Java code is also valid Groovy code, so the learning curve is small.</p><p><strong>Feature focus: safe navigation.</strong> Groovy has many features that let you write more-concise code compared to Java. One of them is the <em>safe navigation operator</em>, which prevents a <code>NullPointerException</code>. In Java, dealing with null can be cumbersome. For example, the following code might result in a <code>NullPointerException</code> if either <code>person</code> is null or <code>getCar()</code> returns null:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Insurance carInsurance = </span><br><span class="line">person.getCar().getInsurance();</span><br></pre></td></tr></table></figure><p>To prevent an unintended <code>NullPointerException</code>, you can be defensive and add checks to prevent null dereferences, as shown in <strong>Listing 5</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Java]</span><br><span class="line"></span><br><span class="line">Insurance carInsurance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(person != <span class="keyword">null</span>)&#123;</span><br><span class="line">    Car car = person.getCar();</span><br><span class="line">    <span class="keyword">if</span>(car != <span class="keyword">null</span>)&#123;</span><br><span class="line">        carInsurance = </span><br><span class="line">            car.getInsurance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 5</strong></p><p>However, the code quickly becomes ugly because of the nested checks, which also decrease the code’s readability. The safe navigation operator, which is represented by <code>?.</code>, can help you navigate safely through potential null references:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> carInsurance = </span><br><span class="line">person?.getCar()?.getInsurance()</span><br></pre></td></tr></table></figure><p>In this case, the variable <code>carInsurance</code> will be null if <code>person</code> is null, <code>getCar()</code> returns null, or <code>getInsurance()</code> returns null. However, no <code>NullPointerException</code> is thrown along the way.</p><h3 id="3-Clojure"><a href="#3-Clojure" class="headerlink" title="3 | Clojure"></a>3 | Clojure</h3><p><a href="//www.clojure.org/">Clojure</a> is a dynamically typed programming language that can be seen as a modern take on Lisp. It is radically different from what object-oriented programmers might be used to. In fact, Clojure is a fully functional programming language, and as a result, it is centered on immutable data structures, recursion, and functions.</p><p><strong>Feature focus: homoiconicity.</strong> What differentiates Clojure from most languages is that it’s a <em>homoiconic</em> language. That is, Clojure code is represented using the language’s fundamental datatypes—for example, lists, symbols, and literals—and you can manipulate the fundamental datatypes using built-in constructs. As a consequence, Clojure code can be elegantly manipulated and transformed by reusing the built-in constructs.</p><p>Clojure has a built-in <code>if</code> construct. It works like this. Let’s say you want to extend the language with a new construct called <code>unless</code> that should work like an inverted <code>if</code>. In other words, if the condition that is passed as an argument evaluates to <code>false</code>, Clojure evaluates the first branch. Otherwise—if the argument evaluates to <code>true</code>—Clojure evaluates the second branch. You should be able to call the <code>unless</code> construct as shown in <strong>Listing 6</strong>.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Clojure]</span><br><span class="line"></span><br><span class="line">(<span class="name">unless</span> <span class="literal">false</span> (<span class="name">println</span> <span class="string">"ok!!"</span>) (<span class="name">println</span> <span class="string">"boo!!"</span>)) </span><br><span class="line"><span class="comment">; prints "ok!!"</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">if</span></span> <span class="literal">false</span> (<span class="name">println</span> <span class="string">"boo!!"</span>) (<span class="name">println</span> <span class="string">"ok!!"</span>)) </span><br><span class="line"><span class="comment">; prints "ok!!"</span></span><br></pre></td></tr></table></figure><p><strong>Listing 6</strong></p><p>To achieve the desired result you can define a macro that transforms a call to <code>unless</code> to use the construct <code>if</code>, but with its branch arguments reversed (in other words, swap the first branch and the second branch). In Clojure, you can manipulate the code representing the branches that are passed as an argument as if it were data. See <strong>Listing 7</strong>.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Clojure]</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> unless</span><br><span class="line">  <span class="string">"Inverted 'if'"</span></span><br><span class="line">  [condition &amp; branches]</span><br><span class="line">  (<span class="name"><span class="builtin-name">conj</span></span> (<span class="name"><span class="builtin-name">reverse</span></span> branches) condition 'if))</span><br></pre></td></tr></table></figure><p><strong>Listing 7</strong></p><p>In this macro definition, the symbol <code>branches</code> consists of a list that contains the two expressions representing the two branches to execute (<code>println &quot;boo!!&quot;</code> and <code>println &quot;ok!!&quot;</code>). With this list in hand, you can now produce the code for the <code>unless</code> construct. First, call the core function <code>reverse</code> on that list. You’ll get a new list with the two branches swapped. You can then use the core function <code>conj</code>, which when given a list, adds the remaining arguments to the front of the list. Here, you pass the <code>if</code> operation together with the condition to evaluate.</p><h3 id="4-Kotlin"><a href="#4-Kotlin" class="headerlink" title="4 | Kotlin"></a>4 | Kotlin</h3><p><a href="//kotlinlang.org/">Kotlin</a> is a statically typed object-oriented language. Its main design goals are to be compatible with Java’s API, have a type system that catches more errors at compile time, and be less verbose than Java. Kotlin’s designers say that Scala is a close choice to match its design goals, but they dislike Scala’s complexity and long compilation time compared to Java. Kotlin aims to tackle these issues.</p><p><strong>Feature focus: smart casts.</strong> Many developers see the Java cast feature as annoying and redundant. For an example, see <strong>Listing 8</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(expr <span class="keyword">instanceof</span> Number)&#123;</span><br><span class="line">    System.out.println(((Number) expr).getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 8</strong></p><p>Repeating the cast to <code>Number</code> shouldn’t be necessary, because within the <code>if</code> block, <code>expr</code> has to be an instance of <code>Number</code>. The generality of this technique is called _flow typing_—type information propagates with the flow of the program.</p><p>Kotlin supports <em>smart casts</em>. That is, you don’t have to cast the expression within the <code>if</code> block. See <strong>Listing 9</strong>.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Kotlin]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(expr <span class="keyword">is</span> Number)&#123;</span><br><span class="line">    println(expr.getValue())</span><br><span class="line"><span class="comment">// expr is automatically cast to Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 9</strong></p><h3 id="5-Ceylon"><a href="#5-Ceylon" class="headerlink" title="5 | Ceylon"></a>5 | Ceylon</h3><p>Red Hat developed <a href="https://ceylon-lang.org/" target="_blank" rel="noopener">Ceylon</a>, a statically typed object-oriented language, to give Java programmers a language that’s easy to learn and understand (because of syntax that’s similar to Java) but less verbose. Ceylon includes more type system features than Java. For example, Ceylon supports a construct for defining type aliases (similar to C’s <code>typedef;</code> for example, you could define <code>Strings</code> to be an alias for <code>List&lt;String&gt;</code>), flow typing (for example, no need to cast the type of an expression in a block if you’ve already done an <code>instanceof</code> check on it), union of types, and local type inference. In addition, in Ceylon you can ask certain variables or blocks of code to use dynamic typing—type checking is performed at runtime instead of compile time.</p><p><strong>Feature focus: for comprehensions.</strong><code>for</code> comprehensions can be seen as syntactic sugar for a chain of <code>map</code>, <code>flatMap</code>, and <code>filter</code> operations using Java SE 8 streams. For example, in Java, by combining a range and a <code>map</code> operation, you can generate all the numbers from 2 to 20 with a step value of <code>2</code>, as shown in <strong>Listing 10</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Java]</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; numbers = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).mapToObj(</span><br><span class="line">x -&gt; x * <span class="number">2</span>).collect(toList());</span><br></pre></td></tr></table></figure><p><strong>Listing 10</strong></p><p>In Ceylon, it can be written as follows using a <code>for</code> comprehension:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = </span><br><span class="line">[<span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span>) x * <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>Here’s a more-complex example. In Java, you can generate a list of points in which the sum of the <code>x</code> and <code>y</code> coordinates is equal to <code>10</code>. See <strong>Listing 11</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Java]</span><br><span class="line"></span><br><span class="line">List&lt;Point&gt; points = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).boxed()</span><br><span class="line">.flatMap(x -&gt; IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">  .filter(y -&gt; x + y == <span class="number">10</span>)</span><br><span class="line">  .mapToObj(y -&gt; <span class="keyword">new</span> Point(x, y)))</span><br><span class="line">  .collect(toList());</span><br></pre></td></tr></table></figure><p><strong>Listing 11</strong></p><p>Thinking in terms of <code>flatMap</code> and <code>map</code> operations using the Stream API might be overwhelming. Instead, in Ceylon, you can write more simply, as done in the code shown in <strong>Listing 12</strong>, which produces <code>[(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)]</code>.</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Ceylon]</span><br><span class="line">List&lt;Point&gt; points = </span><br><span class="line">   [<span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) <span class="keyword">for</span>(y <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) </span><br><span class="line">   <span class="keyword">if</span>(x+y == <span class="number">10</span>) Point(x, y)];</span><br></pre></td></tr></table></figure><p><strong>Listing 12</strong></p><p>The result: Ceylon can make your code more concise.</p><h3 id="6-Xtend"><a href="#6-Xtend" class="headerlink" title="6 | Xtend"></a>6 | Xtend</h3><p><a href="https://www.eclipse.org/xtend/" target="_blank" rel="noopener">Xtend</a> is a statically typed object-oriented language. One way it differs from other languages is that it compiles to pretty-printed Java code rather than bytecode. As a result, you can also work with the generated code.</p><p>Xtend supports two forms of method invocation: default Java dispatching and multiple dispatching. With multiple dispatching, an overloaded method is selected based on the runtime type of its arguments (instead of the traditional static types of the arguments, as in Java). Xtend provides many other popular features available in other languages such as operator overloading and type inference.</p><p>One unique feature is template expressions, which are a convenient way to generate string concatenation (similar to what template engines provide). For example, template expressions support control-flow constructs such as <code>IF</code> and <code>FOR</code>. In addition, special processing of white space allows templates to be readable and their output to be nicely formatted.</p><p><strong>Feature focus: active annotations.</strong> Xtend provides a feature called active annotations, which is a way to do compile-time metaprogramming. In its simplest form, this feature allows you to generate code transparently, such as adding methods or fields to classes with seamless integration in the Eclipse IDE for example. New fields or meth-ods will show up as members of the modified classes within the Eclipse environment. More-advanced use of this feature can generate a skeleton of design patterns such as the visitor or observer pattern. You can provide your own way to generate code using template expressions.</p><p>Here’s an example to illustrate this feature in action. Given sample JSON data, you can automatically generate a domain class in your Xtend program that maps JSON properties into members. The Eclipse IDE will recognize these members, so you can use features such as type checking and autocompletion. All you have to do is wrap the JSON sample within an <code>@Jsonized</code> annotation. <strong>Figure 2</strong> shows an example within the Eclipse IDE using a JSON sample representing a tweet.</p><p><img alt="Architect-languages-f2" data-src="https://www.oracle.com/ocom/groups/public/@otn/documents/digitalasset/2267343.jpg"></p><p><strong>Figure 2</strong></p><h3 id="7-Fantom"><a href="#7-Fantom" class="headerlink" title="7 | Fantom"></a>7 | Fantom</h3><p><a href="https://www.fantom.org/" target="_blank" rel="noopener">Fantom</a> is an object-oriented language featuring a type system that takes an alternative view compared to most other established, statically typed languages. First, it differentiates itself by not supporting user-defined generics. However, three built-in classes can be parameterized: <code>List</code>, <code>Map</code>, and <code>Func</code>. This design decision was made to let programmers benefit from the use of generics (such as working with collections—see the link to an empirical study conducted by Parnin et al. in “Learn More”) without complicating the overall type system. In addition, Fantom provides two kinds of method invocations: one that goes through type checking at compile time (using a dot notation: .) and one that defers checking to runtime (using an arrow notation: <code>-&gt;</code>).</p><p><strong>Feature focus: immutability.</strong> Fantom encourages immutability through language constructs. For example, it supports <code>const</code> classes—once created, an instance is guaranteed to have no state changes. Here’s how it works. You can define a class <code>Transaction</code> prefixed with the <code>const</code> keyword:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const class Transaction &#123;</span><br><span class="line">  const Int value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>const</code> keyword ensures that the class declares only fields that are immutable, so you won’t be able to modify the field named <code>value</code> after you instantiate a <code>Transaction</code>. This is not much different than declaring all fields of a class <code>final</code> in Java. However, this feature is particularly useful with nested structures. For example, let’s say the <code>Transaction</code> class is modified to support another field of type <code>Location</code>. The compiler ensures that the <code>location</code> field can’t be reassigned and that the <code>Location</code> class is immutable.</p><p>For instance, the code in <strong>Listing 13</strong> is incorrect and will produce the error <code>Const field &#39;location&#39; has non-const type &#39;hello_0::Location&#39;</code>. Similarly, all classes extending a <code>const</code> class can be only <code>const</code> classes themselves.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Fantom]</span><br><span class="line"></span><br><span class="line">const class Transaction &#123;</span><br><span class="line">  const Int value</span><br><span class="line">  const Location location := Location(&quot;Cambridge&quot;)</span><br><span class="line">&#125;</span><br><span class="line">class Location&#123;</span><br><span class="line">  Str city</span><br><span class="line">  new make(Str city) &#123; this.city = city &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-X10"><a href="#8-X10" class="headerlink" title="8 | X10"></a>8 | X10</h3><p><a href="http://x10-lang.org/" target="_blank" rel="noopener">X10</a> is an experimental object-oriented language that IBM developed. It supports features such as first-class functions and is designed to facilitate efficient programming for high-performance parallel computing.</p><p>To this end, the language is based on a programming model called the <em>partitioned global address space</em>. In this model, each process shares a global address space, and slices of this space are allocated as private memory for local data and access. To work with this model, X10 offers specialized built-in language constructs to work with concurrency and distributed execution.</p><p>Compared to popular object-oriented languages, a novel feature in its type system is support for <em>constraint types</em>. You can think of constraint types as a form of contracts attached to types. What makes this useful is that errors are checked statically, eliminating the need for more-expensive runtime checks. For example, one possible application of constraint types is to report out-of-bound array accesses at compile time.</p><h2 id="Learn-More"><a href="#Learn-More" class="headerlink" title="Learn More"></a>Learn More</h2><ul><li><strong>“<a href="https://dl.acm.org/citation.cfm?id=1985446" target="_blank" rel="noopener">Java Generics Adoption: How New Features Are Introduced, Championed, or Ignored</a>”</strong></li></ul><p><strong>Feature focus: constraint types.</strong> Consider a simple <code>Pair</code> class, with a generated constructor:</p><p><code>class Pair(x: Long, y: Long){}</code></p><p>You can create <code>Pair</code> objects as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val p1 : Pair = <span class="keyword">new</span> Pair(<span class="number">2</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>However, you can also define explicit constraints (similar to contracts) on the properties of a <code>Pair</code> at use-site. Here, you want to ensure that <code>p2</code> holds only symmetric pairs (that is, the values of <code>x</code> and <code>y</code> must be equal):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val p2 : Pair&#123;self.x == self.y&#125; = <span class="keyword">new</span> Pair(<span class="number">2</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>Because <code>x</code> and <code>y</code> are different in this code example, the assignment will be reported as a compile error. However, the following code compiles without an error:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val p2 : Pair&#123;self.x == self.y&#125; = <span class="keyword">new</span> Pair(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article, we examined eight features from eight popular JVM languages. These languages provide many benefits, such as enabling you to write code in a more concise way, use dynamic typing, or access popular functional programming features.</p><p>I hope this article has sparked some interest in alternative languages and that it will encourage you to check out the wider JVM eco-system.</p><p><strong>Acknowledgements.</strong> I’d like to thank Alex Buckley, Richard Warburton, Andy Frank, and Sven Efftinge for their feedback.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.oracle.com/technical-resources/articles/java/architect-languages.html" target="_blank" rel="noopener">Alternative Languages for the JVM</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;JVM虚拟机并不是只支持Java语言的，你可以选择多种多样JVM编程语言去实现你的项目。这些语言最终都会被编译为字节码存储到JVM能够执行的字节码文件中去。最终，这些编程语言都会在现成的JVM上得到有效的优化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Oracle JDK 和 Open JDK</title>
    <link href="https://www.royians.cn/2019/11.18.dc6ff3b1/"/>
    <id>https://www.royians.cn/2019/11.18.dc6ff3b1/</id>
    <published>2019-11-18T08:11:32.000Z</published>
    <updated>2019-11-27T07:03:15.405Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>本文根据<a href="https://snailclimb.top/JavaGuide/" title="Java Guide" target="_blank" rel="noopener">Java Guide</a>补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide</p></blockquote><p>可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么Oracle和OpenJDK之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。</p><a id="more"></a><p>对于Java 7，没什么关键的地方。OpenJDK项目主要基于Sun捐赠的HotSpot源代码。此外，OpenJDK被选为Java 7的参考实现，由Oracle工程师维护。关于JVM，JDK，JRE和OpenJDK之间的区别，Oracle博客帖子在2012年有一个更详细的答案：</p><blockquote><p>问：OpenJDK存储库中的源代码与用于构建Oracle JDK的代码之间有什么区别？<br>答：非常接近 - 我们的Oracle JDK版本构建过程基于OpenJDK 7构建，只添加了几个部分，例如部署代码，其中包括Oracle的Java插件和Java WebStart的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源Oracle JDK的所有部分，除了我们考虑商业功能的部分。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Oracle JDK大概每6个月发一次主要版本，而OpenJDK版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：<a href="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。" target="_blank" rel="noopener">https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。</a></li><li>OpenJDK 是一个参考模型并且是完全开源的，而Oracle JDK是OpenJDK的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK和Oracle JDK的代码几乎相同，但Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到Oracle JDK就可以解决问题；</li><li>在响应性和JVM性能方面，Oracle JDK与OpenJDK相比提供了更好的性能；<br>Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文根据&lt;a href=&quot;https://snailclimb.top/JavaGuide/&quot; title=&quot;Java Guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java Guide&lt;/a&gt;补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么Oracle和OpenJDK之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
      <category term="Java Guide" scheme="https://www.royians.cn/tags/Java-Guide/"/>
    
  </entry>
  
  <entry>
    <title>JVM、JDK和JRE</title>
    <link href="https://www.royians.cn/2019/11.18.7f3e3da/"/>
    <id>https://www.royians.cn/2019/11.18.7f3e3da/</id>
    <published>2019-11-18T03:54:45.000Z</published>
    <updated>2019-11-27T07:03:15.346Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>本文根据<a href="https://snailclimb.top/JavaGuide/" title="Java Guide" target="_blank" rel="noopener">Java Guide</a>补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide</p></blockquote><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>JVM（Java Vitural Machain）是运行Java字节码的虚拟机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、堆和一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。</p><a id="more"></a><p>JVM有针对不同系统的特定实现，目的是使用相同的字节码，他们都会给出相同的结果</p><blockquote><p>在 Java 中，JVM可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><p>当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或关闭，则虚拟机实例小王，多个虚拟机之间数据不能共享。</p><p><img alt data-src="https://i.loli.net/2019/11/18/wb8ZfYBAvzUkh5Q.png"></p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。</p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.im/post/59ad4cd56fb9a02477075780#heading-89" target="_blank" rel="noopener">重读 JVM</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文根据&lt;a href=&quot;https://snailclimb.top/JavaGuide/&quot; title=&quot;Java Guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java Guide&lt;/a&gt;补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h2&gt;&lt;p&gt;JVM（Java Vitural Machain）是运行Java字节码的虚拟机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、堆和一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
      <category term="Java Guide" scheme="https://www.royians.cn/tags/Java-Guide/"/>
    
  </entry>
  
  <entry>
    <title>Java语言有哪些特点</title>
    <link href="https://www.royians.cn/2019/11.18.6ec38e0a/"/>
    <id>https://www.royians.cn/2019/11.18.6ec38e0a/</id>
    <published>2019-11-18T01:12:33.000Z</published>
    <updated>2019-11-27T07:03:15.378Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><blockquote><p>本文根据<a href="https://snailclimb.top/JavaGuide/" title="Java Guide" target="_blank" rel="noopener">Java Guide</a>补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide</p></blockquote><h2 id="简单易学"><a href="#简单易学" class="headerlink" title="简单易学"></a>简单易学</h2><ol><li>Java的风格类似于C++，因而C++程序员是非常熟悉的。从某种意义上讲，Java语言是C及C++语言的一个变种，因此，C++程序员可以很快就掌握Java编程技术。</li><li>Java摒弃了C++中容易引发程序错误的地方，如指针和内存管理。</li><li>Java提供了丰富的类库。</li></ol><a id="more"></a><h2 id="面向对象（封装，继承，多态）"><a href="#面向对象（封装，继承，多态）" class="headerlink" title="面向对象（封装，继承，多态）"></a>面向对象（封装，继承，多态）</h2><p>传统意义上，面向对象有三大特性：<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>。《码出高效》一书中将<strong>抽象</strong>也作为面向对象的三大特性，支持面向对象“四大特性”的说法。虽然面向过程也需要一定的抽象能力，但是相对来说，面向对象思维，以对象模型为核心，丰富模型内涵，扩展模型外延，通过模型的行为组合去共同解决某一类问题，抽象能力显得尤为重要；封装是一种对象功能内聚的表现形式，使模块之间耦合度贬低，更具有维护性；继承使子类能够继承父类，获得父类的部分属性和行为，使模块更有复用性；多态使模块在复用性基础上更加有扩展性，使运行期更有想象空间。</p><h2 id="平台无关性（Java虚拟机实现平台无关性）"><a href="#平台无关性（Java虚拟机实现平台无关性）" class="headerlink" title="平台无关性（Java虚拟机实现平台无关性）"></a>平台无关性（Java虚拟机实现平台无关性）</h2><p>Java是一门跨平台的语言，是平台无关性的，这也是Java语言可以迅速崛起并风光无限的一个重要的原因。</p><p>平台无关性就是一种语言在计算机上运行不受平台的约束，一次编译，到处运行。Java语言是借助class二进制字节码文件实现跨平台的。而class文件也是在对于Java平台无关性的支持中扮演的重要角色之一，除class文件之外，还有Java语言规范、JVM。</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>对于不同的平台（操作系统、硬件），最主要的区别就是指令不同。比如同样是执行<code>a+b</code>，A平台的指令是<code>10001000</code>，而B平台就是<code>11101110</code>了。想做到跨平台，最重要的就是可以根据对应硬件和操作系统生成对应的二进制指令。</p><p>而这一工作在Java中，就是由JVM完成的。<strong>Java语言是平台无关的，但是JVM是平台有关的</strong>，不同的操作系统要安装不同的JVM。</p><p><img alt data-src="https://i.loli.net/2019/11/18/d2Ky9ILshAjFeMP.png"></p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由字节码组成的Class文件进行交互。</p><p>我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。</p><p>因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。</p><h3 id="Java语言规范"><a href="#Java语言规范" class="headerlink" title="Java语言规范"></a>Java语言规范</h3><p>有了平台对应的不同JVM，和统一的class文件，Java仍然不能彻底实现跨平台，而Java在实现跨平台方面，做出了自己的努力，体现在Java语言规范中。</p><p>C/C++中，基本数据类型是由它的占位宽度决定的，而占位宽度是由平台自己决定的。因此，在不同平台中，对于同一个C/C++程序进行编译会出现不同的行为。</p><p>而在Java中，它的基本数据类型的值域和行为都是由自己定义的。通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供了强有力的支持。</p><p><img alt data-src="https://i.loli.net/2019/11/18/bQsfJYHC2rRjO47.png"></p><h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><p>Java致力于检查程序在编译和运行时的错误。类型检查帮助检查出许多开发早期出现的错误。Java自已操纵内存减少了内存出错的可能性。Java还实现了真数组，避免了覆盖数据的可能。这些功能特征大大缩短了开发Java应用程序的周期。Java提供Null指针检测数组边界检测异常出口字节代码校验。</p><p>Java needed to reduce the likelihood of fatal errors from programmer mistakes. With this in mind, object-oriented programming was introduced. When data and its manipulation were packaged together in one place, Java was robust.</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>Java的安全性可从两个方面得到保证。一方面，在Java语言里，象指针和释放内存等C++功能被删除，避免了非法内存操作。另一方面，当Java用来创建浏览器时，语言功能和浏览器本身提供的功能结合起来，使它更安全。Java语言在你的机器上执行前，要经过很多次的测试。它经过代码校验，检查代码段的格式，检测指针操作，对象操作是否过分以及试图改变一个对象的类型。</p><p>Because Java was originally targeting mobile devices that would be exchanging data over networks, it was built to include a high level of security. Java is probably the most secure programming language to date.</p><h2 id="支持多线程"><a href="#支持多线程" class="headerlink" title="支持多线程"></a>支持多线程</h2><p>C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持</p><blockquote><p>修正（参见：<a href="https://github.com/Snailclimb/JavaGuide/issues/544" target="_blank" rel="noopener">issue#544</a>）：C++11开始（2011年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用std::thread和std::async来创建线程。<a href="http://www.cplusplus.com/reference/thread/thread/?kw=thread" target="_blank" rel="noopener">参考链接</a></p></blockquote><h2 id="支持网络编程并且很方便"><a href="#支持网络编程并且很方便" class="headerlink" title="支持网络编程并且很方便"></a>支持网络编程并且很方便</h2><p>Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便</p><h2 id="编译与解释并存"><a href="#编译与解释并存" class="headerlink" title="编译与解释并存"></a>编译与解释并存</h2><p>简而言之，Java既是编译型语言又是解释型语言，它通过javac和JIT进行编译，通过JVM进行解释。下面是Java程序从编写到执行的基本过程：</p><ol><li>Programmer write source code and store that into a .java file. Always remember name of your Java source file must be same with the public class declared inside that file, for example if there is public class called Order inside Java file, then it name must be Order.java.</li><li>javac compiles .java fie and creates class files, which contains byte code. This byte code is main reason of Java being platform independent.</li><li>JVM executes these class files and gathers statistics of execution run. These statics are used to determine hot spot i.e. part of your code which executes 90% of time.</li><li>After certain threshold, when JVM has enough data to make decision, JIT compiles frequently used byte codes into native code, which is then directly executed by platform. This provides performance boost to Java application.</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/jay36/p/7762535.html" target="_blank" rel="noopener">JAVA语言主要特点有哪些？</a></li><li><a href="https://mp.weixin.qq.com/s/KIeLngRROEkjRJ5chPE1lw" target="_blank" rel="noopener">Java是如何实现平台无关性（跨平台）的?</a></li><li><a href="https://www.thoughtco.com/what-is-java-2034117" target="_blank" rel="noopener">What Is Java?</a></li><li><a href="https://javarevisited.blogspot.com/2014/06/is-java-interpreted-or-compiled-programming-language.html" target="_blank" rel="noopener">Is Java Compiled or Interpreted Programming language?</a></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文根据&lt;a href=&quot;https://snailclimb.top/JavaGuide/&quot; title=&quot;Java Guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java Guide&lt;/a&gt;补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;简单易学&quot;&gt;&lt;a href=&quot;#简单易学&quot; class=&quot;headerlink&quot; title=&quot;简单易学&quot;&gt;&lt;/a&gt;简单易学&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Java的风格类似于C++，因而C++程序员是非常熟悉的。从某种意义上讲，Java语言是C及C++语言的一个变种，因此，C++程序员可以很快就掌握Java编程技术。&lt;/li&gt;&lt;li&gt;Java摒弃了C++中容易引发程序错误的地方，如指针和内存管理。&lt;/li&gt;&lt;li&gt;Java提供了丰富的类库。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
      <category term="Java Guide" scheme="https://www.royians.cn/tags/Java-Guide/"/>
    
  </entry>
  
  <entry>
    <title>面向对象和面向过程的区别</title>
    <link href="https://www.royians.cn/2019/11.15.c24abcdc/"/>
    <id>https://www.royians.cn/2019/11.15.c24abcdc/</id>
    <published>2019-11-15T06:56:09.000Z</published>
    <updated>2019-11-27T07:03:15.332Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --><p>今天开始根据<a href="https://snailclimb.top/JavaGuide/" title="Java Guide" target="_blank" rel="noopener">Java Guide</a>开始补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide</p><p>众所周知，Java是一种面向对象的语言，关于面向过程、面向对象的基本概念等已经是老生常谈的话题了。</p><a id="more"></a><h2 id="什么叫做面向过程"><a href="#什么叫做面向过程" class="headerlink" title="什么叫做面向过程"></a>什么叫做面向过程</h2><p>面向过程编程，英文名是Procedural、Procedure-oriented或者Function-oriented programming，主要是指那些使用顺序、条件、循环这种结构来写的程序，它们解决问题的方法是按照一定顺序的、按照过程一步一步地的去解决。</p><p>例如：把衣服脱下来 -&gt; 找一个盆 -&gt; 放点洗衣粉 -&gt; 加点水 -&gt; 浸泡10分钟 -&gt; 揉一揉 -&gt; 清洗衣服 -&gt; 拧干 -&gt; 晾起来。这个程序强调的是步骤。</p><h2 id="什么叫做面向对象"><a href="#什么叫做面向对象" class="headerlink" title="什么叫做面向对象"></a>什么叫做面向对象</h2><p>面向对象编程（Object-Oriented Programming）是划时代的编程思想变革，推动了高级语言的快速发展和工业化进程。OOP的抽象、封装、继承、多态的理念使软件大规模化成为可能，有效地降低了软件开发成本、维护成本和复用成本<a href="https://github.com/alibaba/p3c" title="节选自《码出高效：Java开发手册》" target="_blank" rel="noopener"><sup>注1</sup></a></p><p>面向对象：把衣服脱下来 -&gt; 打开全自动洗衣机 -&gt; 扔衣服 -&gt; 按钮 -&gt; 晾起来</p><p>面向对象：强调对象，这里的对象就是洗衣机。</p><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。</p><h2 id="面向过程和面向对象的优缺点"><a href="#面向过程和面向对象的优缺点" class="headerlink" title="面向过程和面向对象的优缺点"></a>面向过程和面向对象的优缺点</h2><p><strong>面向过程</strong> ：<mark>面向过程性能比面向对象高</mark>。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<mark>面向过程没有面向对象易维护、易复用、易扩展。</mark></p><p><strong>面向对象</strong> ：<mark>面向对象易维护、易复用、易扩展</mark>。 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<mark>面向对象性能比面向过程低。</mark></p><blockquote><p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。<br>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 11 2020 16:31:39 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;今天开始根据&lt;a href=&quot;https://snailclimb.top/JavaGuide/&quot; title=&quot;Java Guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java Guide&lt;/a&gt;开始补充学习Java，因此有Java Guide标签的文章内容大多引用自Java Guide&lt;/p&gt;&lt;p&gt;众所周知，Java是一种面向对象的语言，关于面向过程、面向对象的基本概念等已经是老生常谈的话题了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java之路" scheme="https://www.royians.cn/categories/Java%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Java" scheme="https://www.royians.cn/tags/Java/"/>
    
      <category term="Java Guide" scheme="https://www.royians.cn/tags/Java-Guide/"/>
    
  </entry>
  
  <entry>
    <title>Spring01 初识Spring</title>
    <link href="https://www.royians.cn/2019/11.07.b42bb27/"/>
    <id>https://www.royians.cn/2019/11.07.b42bb27/</id>
    <published>2019-11-07T01:53:42.000Z</published>
    <updated>2019-11-27T07:03:15.385Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 11 2020 16:31:40 GMT+0800 (GMT+08:00) --><h2 id="Spring-Framework-历史"><a href="#Spring-Framework-历史" class="headerlink" title="Spring Framework 历史"></a>Spring Framework 历史</h2><ul><li>诞生于 2002 年，成型于 2003 年，最早的作者为 Rod Johnson<ul><li>Expert One-on-One J2EE Design and Development</li><li>Expert One-on-One J2EE Development without EJB</li></ul></li><li>目前已经发展到 Spring 5.x 版本，支持 JDK-8-11 及 Java EE 8</li><li>现在 Spring 这个词不只代表 Spring 框架，而是整个 Spring 家族</li><li>Spring Framework<ul><li>用于构建企业级应用的轻量级几件事解决方案</li><li>设计理念<ul><li>力争让选择无处不在</li><li>体现海纳百川的精神</li><li>保持向后兼容性</li><li>专注 API 设计</li><li>追求严苛的代码质量</li></ul></li></ul></li><li>SpringBoot<ul><li>快速构建基于Spring的应用程序</li></ul></li><li>Spring Data、 Spring MVC、 Spring WebFlux…</li><li>Spring Cloud<ul><li>简化分布式系统的开发</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      看极客时间，学习Spring的第一天
    
    </summary>
    
    
      <category term="Spring之路" scheme="https://www.royians.cn/categories/Spring%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Spring" scheme="https://www.royians.cn/tags/Spring/"/>
    
  </entry>
  
</feed>
